var WidgetMetadata = {
  id: "yuanqi.wallpaper",
  title: "元气壁纸",
  description: "基于网页解析的元气壁纸获取工具",
  author: "改造版",
  site: "https://mbizhi.cheetahfun.com/",
  version: "1.0.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,
  modules: [
    {
      title: "获取壁纸列表",
      description: "根据分类、页码等参数获取壁纸列表",
      requiresWebView: false,
      functionName: "getWallpaperList",
      sectionMode: false,
      cacheDuration: 3600,
      params: [
        {
          name: "sortBy",
          title: "壁纸分类",
          type: "enumeration",
          description: "选择壁纸分类",
          value: "all",
          enumOptions: [
            { title: "全部", value: "all" },
            { title: "动态壁纸", value: "dynamic" },
            { title: "静态壁纸", value: "static" },
            { title: "4K壁纸", value: "4k" },
            { title: "风景", value: "landscape" },
            { title: "动漫", value: "anime" },
            { title: "美女", value: "beauty" },
            { title: "动物", value: "animal" },
            { title: "游戏", value: "game" },
            { title: "小清新", value: "fresh" },
            { title: "AI", value: "ai" },
            { title: "其他", value: "other" }
          ]
        },
        {
          name: "pg",
          title: "页码",
          type: "page",
          value: "1"
        }
      ]
    }
  ],
  search: {
    title: "搜索壁纸",
    functionName: "searchWallpaper",
    params: [
      {
        name: "wd",
        title: "搜索关键词",
        type: "input",
        description: "输入要搜索的壁纸关键词",
        value: ""
      },
      {
        name: "pg",
        title: "页码",
        type: "page",
        value: "1"
      }
    ]
  }
};

// 基础URL
const BASE_URL = "https://mbizhi.cheetahfun.com";

/**
 * 构建请求URL
 */
function buildWallpaperUrl(sortBy = "all", page = 1) {
  let url = BASE_URL;
  
  // 根据sortBy构建URL - 基于实际网站结构
  if (sortBy !== "all") {
    const categoryMap = {
      "dynamic": "/dn/d/",      // 动态壁纸
      "static": "/jt/j/",       // 静态壁纸 
      "4k": "/dn/c1d/",         // 4K动态壁纸
      "landscape": "/dn/c3d/",  // 风景动态壁纸
      "anime": "/dn/c2d/",      // 动漫动态壁纸
      "beauty": "/dn/c4d/",     // 美女动态壁纸
      "animal": "/dn/c6d/",     // 动物动态壁纸
      "game": "/dn/c7d/",       // 游戏动态壁纸
      "fresh": "/dn/c8d/",      // 小清新动态壁纸
      "ai": "/dn/c5d/",         // AI动态壁纸
      "other": "/dn/c11d/"      // 其他动态壁纸
    };
    
    if (categoryMap[sortBy]) {
      url += categoryMap[sortBy];
    }
  } else {
    url += "/dn/d/"; // 默认动态壁纸页面
  }
  
  // 添加页码
  if (page > 1) {
    url += `p${page}`;
  }
  
  return url;
}

/**
 * 使用Cheerio解析HTML页面中的壁纸信息
 */
function parseWallpaperFromHtml(html, baseUrl = BASE_URL) {
  const wallpapers = [];
  
  try {
    // 使用Widget内置的cheerio进行DOM解析
    const $ = Widget.html.load(html);
    
    console.log("parseWallpaperFromHtml: 开始解析HTML内容");
    
    // 查找壁纸项目容器 - 根据元气壁纸实际HTML结构
    const itemSelectors = [
      'li',                    // 列表项
      '.item',                 // 通用item类
      '.wallpaper-item',       // 壁纸项目类
      '.pic-item',             // 图片项目类
      'div[onclick]',          // 带点击事件的div
      'a[href*="/dn/pd"]',     // 指向详情页的链接
      'a[href*="/jt/pj"]'      // 静态壁纸详情页链接
    ];
    
    let $items = $();
    let usedSelector = '';
    
    for (const selector of itemSelectors) {
      $items = $(selector);
      if ($items.length > 0) {
        usedSelector = selector;
        console.log(`parseWallpaperFromHtml: 使用选择器 ${selector} 找到 ${$items.length} 个项目`);
        break;
      }
    }
    
    if ($items.length === 0) {
      console.warn("parseWallpaperFromHtml: 未找到任何壁纸项目");
      return wallpapers;
    }
    
    $items.each((index, element) => {
      if (index >= 50) return false; // 限制解析数量
      
      try {
        const $item = $(element);
        
        // 提取链接 - 多种方式
        let detailUrl = '';
        
        // 方式1: 从href属性获取
        detailUrl = $item.attr('href') || '';
        
        // 方式2: 从子元素a标签获取
        if (!detailUrl) {
          const $link = $item.find('a').first();
          detailUrl = $link.attr('href') || '';
        }
        
        // 方式3: 从onclick事件中提取
        if (!detailUrl) {
          const onclick = $item.attr('onclick') || '';
          const urlMatch = onclick.match(/['"](\/[^'"]+)['"]/);
          if (urlMatch) {
            detailUrl = urlMatch[1];
          }
        }
        
        // 确保URL完整
        if (detailUrl && !detailUrl.startsWith('http')) {
          detailUrl = baseUrl + detailUrl;
        }
        
        if (!detailUrl) {
          console.warn(`parseWallpaperFromHtml: 项目 ${index} 未找到链接`);
          return; // 跳过这个项目
        }
        
        // 提取图片 - 多种方式，避免获取角标
        let imageUrl = '';
        
        // 尝试多种图片选择器
        const imgSelectors = [
          'img[src*="thumb"]',        // 缩略图
          'img[src*="preview"]',      // 预览图
          'img.lazy',                 // 懒加载图片
          'img[data-src]',            // data-src属性
          'img[data-original]',       // data-original属性
          'img:not([src*="icon"]):not([src*="tag"]):not([src*="label"])', // 排除图标
          'img'                       // 备用
        ];
        
        for (const imgSelector of imgSelectors) {
          const $img = $item.find(imgSelector).first();
          if ($img.length > 0) {
            imageUrl = $img.attr('src') || $img.attr('data-src') || $img.attr('data-original') || '';
            
            // 过滤掉明显的角标和图标图片
            if (imageUrl && 
                !imageUrl.includes('/icon/') && 
                !imageUrl.includes('/tag/') && 
                !imageUrl.includes('/label/') &&
                !imageUrl.includes('dynamic.png') &&
                !imageUrl.includes('static.png') &&
                !imageUrl.includes('play.png') &&
                imageUrl.length > 10) {
              break;
            }
            imageUrl = ''; // 重置，继续查找
          }
        }
        
        // 确保图片URL完整
        if (imageUrl && !imageUrl.startsWith('http')) {
          imageUrl = baseUrl + imageUrl;
        }
        
        if (!imageUrl) {
          console.warn(`parseWallpaperFromHtml: 项目 ${index} 未找到有效图片`);
        }
        
        // 提取标题 - 多种来源
        let title = '';
        
        // 尝试从多个地方获取标题
        const titleSources = [
          () => $item.find('img').first().attr('alt'),
          () => $item.find('.title, .name, .wallpaper-title').first().text().trim(),
          () => $item.find('h3, h4, h5, p.title').first().text().trim(),
          () => $item.find('a').first().attr('title'),
          () => $item.attr('title'),
          () => {
            // 从URL中提取ID作为标题
            const urlMatch = detailUrl.match(/pd(\d+)\.html/);
            return urlMatch ? `壁纸 ${urlMatch[1]}` : '';
          }
        ];
        
        for (const getTitle of titleSources) {
          const titleCandidate = getTitle();
          if (titleCandidate && titleCandidate.trim() && 
              titleCandidate.length > 2 &&
              !titleCandidate.includes('动态') && 
              !titleCandidate.includes('静态')) {
            title = titleCandidate.trim();
            break;
          }
        }
        
        if (!title) {
          title = `壁纸 ${index + 1}`;
        }
        
        // 判断是否为动态壁纸
        const itemHtml = $item.html() || '';
        const itemText = $item.text().toLowerCase();
        const isDynamic = detailUrl.includes('/dn/') || 
                         itemText.includes('动态') || 
                         itemText.includes('视频') || 
                         itemHtml.includes('play') ||
                         itemHtml.includes('gif');
        
        // 提取分类信息
        let category = '';
        if (detailUrl.includes('/dn/c1d/')) category = '4K';
        else if (detailUrl.includes('/dn/c2d/')) category = '动漫';
        else if (detailUrl.includes('/dn/c3d/')) category = '风景';
        else if (detailUrl.includes('/dn/c4d/')) category = '美女';
        else if (detailUrl.includes('/dn/c5d/')) category = 'AI';
        else if (detailUrl.includes('/dn/c6d/')) category = '动物';
        else if (detailUrl.includes('/dn/c7d/')) category = '游戏';
        else if (detailUrl.includes('/dn/c8d/')) category = '小清新';
        else if (detailUrl.includes('/dn/c11d/')) category = '其他';
        else if (detailUrl.includes('/jt/')) category = '静态壁纸';
        else category = isDynamic ? '动态壁纸' : '壁纸';
        
        // 构建返回对象
        const wallpaperItem = {
          id: detailUrl,
          type: "url",
          title: title,
          posterPath: imageUrl || '',
          backdropPath: imageUrl || '',
          mediaType: isDynamic ? "tv" : "movie",
          rating: "",
          genreTitle: category,
          description: `${category} - ${isDynamic ? "动态壁纸" : "静态壁纸"}`,
          link: detailUrl,
          releaseDate: "",
          duration: 0,
          durationText: "",
          previewUrl: ""
        };
        
        wallpapers.push(wallpaperItem);
        console.log(`parseWallpaperFromHtml: 成功解析项目 ${index + 1}: ${title}`);
        
      } catch (itemError) {
        console.error(`parseWallpaperFromHtml: 解析项目 ${index} 时出错:`, itemError.message);
      }
    });
    
    console.log(`parseWallpaperFromHtml: 总共成功解析 ${wallpapers.length} 个壁纸项目`);
    
  } catch (error) {
    console.error("parseWallpaperFromHtml: 解析HTML时出错:", error.message);
    console.error("parseWallpaperFromHtml: 错误堆栈:", error.stack);
  }
  
  return wallpapers;
}

/**
 * 获取壁纸列表
 */
async function getWallpaperList(params = {}) {
  try {
    // 参数验证
    const sortBy = params.sortBy || "all";
    const page = parseInt(params.pg) || 1;
    
    if (page < 1) {
      throw new Error("页码必须大于0");
    }
    
    const requestUrl = buildWallpaperUrl(sortBy, page);
    console.log(`getWallpaperList: 请求壁纸页面: ${requestUrl}`);
    console.log(`getWallpaperList: 分类=${sortBy}, 页码=${page}`);
    
    // 发送请求
    const response = await Widget.http.get(requestUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': BASE_URL,
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin'
      }
    });
    
    // 解析响应
    if (!response || !response.data) {
      throw new Error("获取页面内容失败");
    }
    
    console.log(`getWallpaperList: 页面内容长度: ${response.data.length} 字符`);
    
    const wallpapers = parseWallpaperFromHtml(response.data, BASE_URL);
    
    if (wallpapers.length === 0) {
      console.warn("getWallpaperList: 未解析到任何壁纸项目，可能需要调整解析规则");
      
      // 输出页面内容的一部分用于调试
      const debugContent = response.data.substring(0, 1000);
      console.log("getWallpaperList: 页面内容片段:", debugContent);
    }
    
    console.log(`getWallpaperList: 成功获取 ${wallpapers.length} 个壁纸`);
    return wallpapers;
    
  } catch (error) {
    console.error("getWallpaperList: 获取壁纸列表失败:", error.message);
    console.error("getWallpaperList: 错误堆栈:", error.stack);
    throw error;
  }
}

/**
 * 搜索壁纸
 */
async function searchWallpaper(params = {}) {
  try {
    // 参数验证
    const keyword = params.wd || "";
    const page = parseInt(params.pg) || 1;
    
    if (!keyword.trim()) {
      throw new Error("搜索关键词不能为空");
    }
    
    if (page < 1) {
      throw new Error("页码必须大于0");
    }
    
    console.log(`searchWallpaper: 搜索关键词: ${keyword}, 页码: ${page}`);
    
    // 尝试多种搜索URL格式
    const searchUrls = [
      `${BASE_URL}/search?q=${encodeURIComponent(keyword)}`,
      `${BASE_URL}/search.php?keyword=${encodeURIComponent(keyword)}`,
      `${BASE_URL}/s?wd=${encodeURIComponent(keyword)}`,
      `${BASE_URL}/search/${encodeURIComponent(keyword)}.html`
    ];
    
    let searchResults = [];
    
    for (const searchUrl of searchUrls) {
      try {
        console.log(`searchWallpaper: 尝试搜索URL: ${searchUrl}`);
        
        const response = await Widget.http.get(searchUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
            'Referer': BASE_URL
          }
        });
        
        if (response && response.data && response.data.length > 1000) {
          searchResults = parseWallpaperFromHtml(response.data, BASE_URL);
          if (searchResults.length > 0) {
            console.log(`searchWallpaper: 搜索成功，找到 ${searchResults.length} 个结果`);
            break;
          }
        }
      } catch (error) {
        console.warn(`searchWallpaper: 搜索URL失败 ${searchUrl}:`, error.message);
        continue;
      }
    }
    
    // 如果直接搜索失败，使用备用搜索方案
    if (searchResults.length === 0) {
      console.log("searchWallpaper: 直接搜索失败，使用备用搜索方案");
      searchResults = await fallbackSearch(keyword, page);
    }
    
    return searchResults;
    
  } catch (error) {
    console.error("searchWallpaper: 搜索失败:", error.message);
    throw error;
  }
}

/**
 * 备用搜索方案 - 在不同分类中查找相关内容
 */
async function fallbackSearch(keyword, page = 1) {
  console.log(`fallbackSearch: 使用备用搜索方案查找: ${keyword}`);
  
  const categories = ["dynamic", "anime", "landscape", "4k", "beauty", "game"];
  let allResults = [];
  
  try {
    // 并行搜索多个分类
    const searchTasks = categories.map(async (sortBy) => {
      try {
        const results = await getWallpaperList({ sortBy, pg: 1 }); // 只搜索第一页
        // 过滤包含关键词的结果
        return results.filter(item => 
          item.title.toLowerCase().includes(keyword.toLowerCase()) ||
          item.description.toLowerCase().includes(keyword.toLowerCase()) ||
          item.genreTitle.toLowerCase().includes(keyword.toLowerCase())
        );
      } catch (error) {
        console.warn(`fallbackSearch: 分类 ${sortBy} 搜索失败:`, error.message);
        return [];
      }
    });
    
    const results = await Promise.all(searchTasks);
    results.forEach(categoryResults => {
      allResults = allResults.concat(categoryResults);
    });
    
    // 去重
    const uniqueResults = [];
    const seenIds = new Set();
    allResults.forEach(item => {
      if (!seenIds.has(item.id)) {
        seenIds.add(item.id);
        uniqueResults.push(item);
      }
    });
    
    console.log(`fallbackSearch: 备用搜索找到 ${uniqueResults.length} 个相关结果`);
    return uniqueResults.slice(0, 20); // 限制结果数量
    
  } catch (error) {
    console.error("fallbackSearch: 备用搜索失败:", error.message);
    return [];
  }
}

/**
 * 加载壁纸详情
 */
async function loadDetail(detailUrl) {
  try {
    // 参数验证
    if (!detailUrl || typeof detailUrl !== "string") {
      throw new Error("无效的详情页URL");
    }
    
    console.log(`loadDetail: 加载壁纸详情: ${detailUrl}`);
    
    // 发送请求
    const response = await Widget.http.get(detailUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Referer': BASE_URL
      }
    });
    
    // 解析响应
    if (!response || !response.data) {
      throw new Error("获取详情页面失败");
    }
    
    const detail = parseWallpaperDetail(response.data, detailUrl);
    
    console.log("loadDetail: 详情解析完成:", detail.title);
    return detail;
    
  } catch (error) {
    console.error(`loadDetail: 加载详情失败:`, error.message);
    throw error;
  }
}

/**
 * 使用Cheerio解析壁纸详情页面
 */
function parseWallpaperDetail(html, url) {
  const detail = {
    id: url,
    type: "url",
    title: "壁纸详情",
    description: "",
    posterPath: "",
    backdropPath: "",
    videoUrl: null,
    releaseDate: "",
    mediaType: "movie",
    rating: "",
    genreTitle: "",
    duration: 0,
    durationText: "",
    previewUrl: "",
    link: url
  };
  
  try {
    // 使用Widget内置的cheerio进行DOM解析
    const $ = Widget.html.load(html);
    
    console.log("parseWallpaperDetail: 开始解析详情页面");
    
    // 提取标题
    let title = '';
    const titleSources = [
      () => $('title').text(),
      () => $('h1').first().text(),
      () => $('.title, .name, .wallpaper-title').first().text(),
      () => $('.detail-title, .content-title').first().text()
    ];
    
    for (const getTitle of titleSources) {
      const titleCandidate = getTitle();
      if (titleCandidate && titleCandidate.trim()) {
        title = titleCandidate.replace(/\s*-\s*元气壁纸.*$/i, '').trim();
        if (title.length > 2) break;
      }
    }
    
    if (title) {
      detail.title = title;
    }
    
    // 提取描述
    const description = $('meta[name="description"]').attr('content') || 
                       $('.description, .desc, .content, .intro').first().text().trim() || '';
    if (description) {
      detail.description = description;
    }
    
    // 查找视频链接（动态壁纸）
    let videoUrl = '';
    const videoSelectors = [
      'video source[src]',
      'video[src]',
      'source[src*=".mp4"]',
      'source[src*=".webm"]',
      'a[href*=".mp4"]',
      'a[href*=".webm"]',
      '.download-btn[href*=".mp4"]',
      '.video-url[data-url]',
      '[data-video-url]'
    ];
    
    for (const selector of videoSelectors) {
      const $video = $(selector).first();
      if ($video.length > 0) {
        videoUrl = $video.attr('src') || $video.attr('href') || $video.attr('data-url') || $video.attr('data-video-url') || '';
        if (videoUrl) {
          if (!videoUrl.startsWith('http')) {
            videoUrl = BASE_URL + videoUrl;
          }
          detail.videoUrl = videoUrl;
          detail.mediaType = "tv"; // 动态壁纸
          console.log("parseWallpaperDetail: 找到视频链接:", videoUrl);
          break;
        }
      }
    }
    
    // 查找高清图片链接（静态封面或静态壁纸）
    let imageUrl = '';
    const imageSelectors = [
      'img[src*="hd"]',              // 高清图片
      'img[src*="large"]',           // 大图
      'img[src*="original"]',        // 原图
      '.wallpaper-image img[src]',   // 壁纸图片
      '.detail-image img[src]',      // 详情图片
      '.preview-image img[src]',     // 预览图片
      '.main-image img[src]',        // 主图片
      'img[data-src]',               // 懒加载图片
      'img[src]:not([src*="icon"]):not([src*="tag"])', // 排除图标
      'img[src]'                     // 备用
    ];
    
    for (const selector of imageSelectors) {
      const $img = $(selector).first();
      if ($img.length > 0) {
        imageUrl = $img.attr('src') || $img.attr('data-src') || '';
        
        // 过滤掉明显的图标和小图片
        if (imageUrl && 
            !imageUrl.includes('/icon/') && 
            !imageUrl.includes('/tag/') && 
            !imageUrl.includes('/thumb/') &&
            imageUrl.length > 10) {
          
          if (!imageUrl.startsWith('http')) {
            imageUrl = BASE_URL + imageUrl;
          }
          
          detail.posterPath = imageUrl;
          detail.backdropPath = imageUrl;
          
          // 如果没有视频，这就是静态壁纸的下载链接
          if (!detail.videoUrl) {
            detail.mediaType = "movie"; // 静态壁纸
          }
          
          console.log("parseWallpaperDetail: 找到图片链接:", imageUrl);
          break;
        }
      }
    }
    
    // 提取分辨率信息
    const bodyText = $('body').text();
    const resolutionMatch = bodyText.match(/(\d{3,4}[x×]\d{3,4})/i);
    if (resolutionMatch) {
      detail.description += ` 分辨率: ${resolutionMatch[1]}`;
    }
    
    // 提取文件大小
    const sizeMatch = bodyText.match(/(\d+(?:\.\d+)?\s*[KMGT]?B)/i);
    if (sizeMatch) {
      detail.description += ` 大小: ${sizeMatch[1]}`;
    }
    
    // 提取发布时间
    const dateMatch = bodyText.match(/(\d{4}-\d{1,2}-\d{1,2})/);
    if (dateMatch) {
      detail.releaseDate = dateMatch[1];
    }
    
    // 设置分类标题
    if (url.includes('/dn/c1d/')) detail.genreTitle = '4K动态壁纸';
    else if (url.includes('/dn/c2d/')) detail.genreTitle = '动漫动态壁纸';
    else if (url.includes('/dn/c3d/')) detail.genreTitle = '风景动态壁纸';
    else if (url.includes('/dn/c4d/')) detail.genreTitle = '美女动态壁纸';
    else if (url
