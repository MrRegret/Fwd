/* =====================
   ForwardWidget 元数据
   ===================== */
var WidgetMetadata = {
  id: "yuanqi.wallpaper",
  title: "元气壁纸",
  description: "基于正则解析的元气壁纸获取工具",
  author: "改造版",
  site: "https://mbizhi.cheetahfun.com",
  version: "1.0.4",
  requiredVersion: "0.0.1",
  modules: [
    {
      title: "获取壁纸列表",
      description: "根据分类、页码等参数获取壁纸列表",
      requiresWebView: false,
      functionName: "getWallpaperList",
      cacheDuration: 3600,
      params: [
        {
          name: "category",
          title: "壁纸分类",
          type: "enumeration",
          description: "选择壁纸分类",
          value: "all",
          enumOptions: [
            { title: "全部", value: "all" },
            { title: "动态壁纸", value: "dynamic" },
            { title: "静态壁纸", value: "static" },
            { title: "4K", value: "4k" },
            { title: "风景", value: "landscape" },
            { title: "动漫", value: "anime" },
            { title: "美女", value: "beauty" },
            { title: "动物", value: "animal" },
            { title: "游戏", value: "game" },
            { title: "小清新", value: "fresh" }
          ]
        },
        {
          name: "pg",
          title: "页码",
          type: "page",
          value: "1"
        }
      ]
    }
  ],
  search: {
    title: "搜索壁纸",
    functionName: "searchWallpaper",
    params: [
      {
        name: "keyword",
        title: "搜索关键词",
        type: "input",
        description: "输入要搜索的壁纸关键词",
        value: ""
      },
      {
        name: "pg",
        title: "页码",
        type: "page",
        value: "1"
      }
    ]
  }
};

/* =====================
   常量
   ===================== */
const BASE_URL = "https://mbizhi.cheetahfun.com";
const UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0 Safari/537.36";

/* =====================
   URL 构造
   ===================== */
function buildWallpaperUrl(category = "all", page = 1) {
  if (category === "all") return `${BASE_URL}/dn/d/${page > 1 ? `page_${page}.html` : ""}`;
  const map = {
    dynamic: "/dt/",
    static: "/jt/",
    "4k": "/4k/",
    landscape: "/fj/",
    anime: "/dm/",
    beauty: "/mn/",
    animal: "/dw/",
    game: "/yx/",
    fresh: "/xqx/"
  };
  return `${BASE_URL}${map[category] || "/dn/d/"}${page > 1 ? `page_${page}.html` : ""}`;
}

/* =====================
   通用正则解析器（核心）
   ===================== */
function parseWallpaperFromHtml(html) {
  const list = [];
  try {
    const itemRegex = /<div[^>]*class="[^"]*item[^"]*"[^>]*>([\s\S]*?)<\/div>/gi;
    const linkRegex = /<a[^>]+href="([^"]+)"[^>]*>/i;
    const imgRegex = /<img[^>]+src="([^"]+)"[^>]*alt="([^"]*)"[^>]*>/i;
    const titleRegex = /<(?:h\d|p|span)[^>]*(?:class="[^"]*title[^"]*"[^>]*)?>(.*?)<\/(?:h\d|p|span)>/i;

    let itemMatch;
    let idx = 0;
    while ((itemMatch = itemRegex.exec(html)) !== null && idx < 50) {
      idx++;
      const block = itemMatch[1];

      // 链接
      const linkMatch = linkRegex.exec(block);
      const detailUrl = linkMatch
        ? linkMatch[1].startsWith("http")
          ? linkMatch[1]
          : BASE_URL + linkMatch[1]
        : "";

      // 图片 & 标题
      const imgMatch = imgRegex.exec(block);
      const imageUrl = imgMatch
        ? imgMatch[1].startsWith("http")
          ? imgMatch[1]
          : BASE_URL + imgMatch[1]
        : "";
      let title = imgMatch?.[2]?.trim() || `壁纸 ${idx}`;

      // 备用标题
      const titleMatch = titleRegex.exec(block);
      if (titleMatch) {
        title = titleMatch[1].replace(/<[^>]*>/g, "").trim() || title;
      }

      // 动态壁纸判断
      const isDynamic =
        /动态|视频|mp4|webm/i.test(block + detailUrl) || detailUrl.includes("/dn/");

      if (detailUrl && imageUrl) {
        list.push({
          id: detailUrl,
          type: "url",
          title,
          posterPath: imageUrl,
          backdropPath: imageUrl,
          mediaType: isDynamic ? "tv" : "movie",
          genreTitle: isDynamic ? "动态壁纸" : "静态壁纸",
          description: title,
          link: detailUrl
        });
      }
    }
  } catch (e) {
    console.error("parseWallpaperFromHtml error:", e.message);
  }
  return list;
}

/* =====================
   详情解析（正则版）
   ===================== */
function parseWallpaperDetail(html, url) {
  const detail = {
    id: url,
    type: "url",
    title: "壁纸详情",
    description: "",
    posterPath: "",
    backdropPath: "",
    videoUrl: null,
    mediaType: "movie",
    link: url
  };

  try {
    // 标题
    const titleMatch = html.match(/<title[^>]*>(.*?)<\/title>/i);
    if (titleMatch) {
      detail.title = titleMatch[1].replace(/\s*-\s*元气壁纸.*$/i, "").trim();
    }

    // 描述
    const descMatch = html.match(/<meta[^>]+name="description"[^>]+content="([^"]*)"[^>]*>/i);
    if (descMatch) detail.description = descMatch[1];

    // 视频 / 高清图
    const videoMatch =
      html.match(/<video[^>]+src="([^"]+)"/i) ||
      html.match(/<source[^>]+src="([^"]+)"/i);
    if (videoMatch) {
      detail.videoUrl = videoMatch[1].startsWith("http")
        ? videoMatch[1]
        : BASE_URL + videoMatch[1];
      detail.mediaType = "tv";
    }

    const imgMatch =
      html.match(/<img[^>]+src="([^"]*(?:hd|4k|wallpaper)[^"]*)"/i) ||
      html.match(/<a[^>]+href="([^"]*\.(?:jpg|jpeg|png|webp))"/i);
    if (imgMatch) {
      detail.posterPath = detail.backdropPath = imgMatch[1].startsWith("http")
        ? imgMatch[1]
        : BASE_URL + imgMatch[1];
    }

    // 分辨率 / 大小
    const res = html.match(/(\d{3,4}[x×]\d{3,4})/i);
    const size = html.match(/(\d+(?:\.\d+)?\s*[KMGT]?B)/i);
    detail.description = [
      res ? `分辨率: ${res[1]}` : "",
      size ? `大小: ${size[1]}` : ""
    ]
      .filter(Boolean)
      .join(" ");
  } catch (e) {
    console.error("parseWallpaperDetail error:", e.message);
  }
  return detail;
}

/* =====================
   ForwardWidget 对外 API
   ===================== */
async function getWallpaperList(params = {}) {
  const category = params.category || "all";
  const page = Math.max(parseInt(params.pg) || 1, 1);
  const url = buildWallpaperUrl(category, page);
  const res = await Widget.http.get(url, {
    headers: { "User-Agent": UA, Referer: BASE_URL }
  });
  if (!res?.data) throw new Error("网络异常");
  return parseWallpaperFromHtml(res.data);
}

async function searchWallpaper(params = {}) {
  const keyword = params.keyword || params.wd || "";
  const page = Math.max(parseInt(params.pg) || 1, 1);
  if (!keyword.trim()) throw new Error("关键词不能为空");
  const url = `${BASE_URL}/search?q=${encodeURIComponent(keyword)}&page=${page}`;
  const res = await Widget.http.get(url, {
    headers: { "User-Agent": UA, Referer: BASE_URL }
  });
  if (!res?.data) throw new Error("搜索页异常");
  return parseWallpaperFromHtml(res.data); // 同一个正则器
}

async function loadDetail(detailUrl) {
  if (!detailUrl || typeof detailUrl !== "string") throw new Error("无效详情链接");
  const res = await Widget.http.get(detailUrl, {
    headers: { "User-Agent": UA, Referer: BASE_URL }
  });
  if (!res?.data) throw new Error("详情页异常");
  return parseWallpaperDetail(res.data, detailUrl);
}
