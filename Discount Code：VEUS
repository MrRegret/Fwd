var WidgetMetadata = {
  id: "yuanqi.wallpaper",
  title: "元气壁纸",
  description: "基于网页解析的元气壁纸获取工具",
  author: "改造版",
  site: "https://mbizhi.cheetahfun.com/",
  version: "1.0.0",
  requiredVersion: "0.0.1",
  modules: [
    {
      title: "获取壁纸列表",
      description: "根据分类、页码等参数获取壁纸列表",
      requiresWebView: false,
      functionName: "getWallpaperList",
      params: [
        {
          name: "sortBy",
          title: "壁纸分类",
          type: "input",
          description: "选择壁纸分类",
          value: "all",
          placeholders: [
            { title: "全部", value: "all" },
            { title: "动态壁纸", value: "dynamic" },
            { title: "静态壁纸", value: "static" },
            { title: "4K壁纸", value: "4k" },
            { title: "风景", value: "landscape" },
            { title: "动漫", value: "anime" },
            { title: "美女", value: "beauty" },
            { title: "动物", value: "animal" },
            { title: "游戏", value: "game" },
            { title: "小清新", value: "fresh" },
            { title: "AI", value: "ai" },
            { title: "其他", value: "other" }
          ]
        },
        {
          name: "pg",
          title: "页码",
          type: "page",
          value: "1"
        }
      ]
    }
  ],
  search: {
    title: "搜索壁纸",
    functionName: "searchWallpaper",
    params: [
      {
        name: "wd",
        title: "搜索关键词",
        type: "input",
        description: "输入要搜索的壁纸关键词",
        value: ""
      },
      {
        name: "pg",
        title: "页码",
        type: "page",
        value: "1"
      }
    ]
  }
};

// 基础URL
const BASE_URL = "https://mbizhi.cheetahfun.com";

/**
 * 构建请求URL
 */
function buildWallpaperUrl(sortBy = "all", page = 1) {
  let url = BASE_URL;
  
  // 根据sortBy构建URL - 基于实际网站结构
  if (sortBy !== "all") {
    const categoryMap = {
      "dynamic": "/dn/d/",      // 动态壁纸
      "static": "/jt/j/",       // 静态壁纸 
      "4k": "/dn/c1d/",         // 4K动态壁纸
      "landscape": "/dn/c3d/",  // 风景动态壁纸
      "anime": "/dn/c2d/",      // 动漫动态壁纸
      "beauty": "/dn/c4d/",     // 美女动态壁纸
      "animal": "/dn/c6d/",     // 动物动态壁纸
      "game": "/dn/c7d/",       // 游戏动态壁纸
      "fresh": "/dn/c8d/",      // 小清新动态壁纸
      "ai": "/dn/c5d/",         // AI动态壁纸
      "other": "/dn/c11d/"      // 其他动态壁纸
    };
    
    if (categoryMap[sortBy]) {
      url += categoryMap[sortBy];
    }
  } else {
    url += "/dn/d/"; // 默认动态壁纸页面
  }
  
  // 添加页码
  if (page > 1) {
    url += `p${page}`;
  }
  
  return url;
}

/**
 * 解析壁纸项目 - 类似原脚本的parseItemFromListApi函数
 */
function parseWallpaperItem(element, $, baseUrl, index) {
  try {
    const $item = $(element);
    
    // 提取链接 - 多种方式
    let detailUrl = '';
    
    // 方式1: 从href属性获取
    detailUrl = $item.attr('href') || '';
    
    // 方式2: 从子元素a标签获取
    if (!detailUrl) {
      const $link = $item.find('a').first();
      detailUrl = $link.attr('href') || '';
    }
    
    // 方式3: 从onclick事件中提取
    if (!detailUrl) {
      const onclick = $item.attr('onclick') || '';
      const urlMatch = onclick.match(/['"](\/[^'"]+)['"]/);
      if (urlMatch) {
        detailUrl = urlMatch[1];
      }
    }
    
    // 确保URL完整
    if (detailUrl && !detailUrl.startsWith('http')) {
      detailUrl = baseUrl + detailUrl;
    }
    
    if (!detailUrl) {
      return null; // 没有链接就跳过
    }
    
    // 提取图片
    let posterPath = '';
    const imgSelectors = [
      'img[src*="thumb"]',
      'img[src*="preview"]',
      'img.lazy',
      'img[data-src]',
      'img[data-original]',
      'img:not([src*="icon"]):not([src*="tag"])',
      'img'
    ];
    
    for (const imgSelector of imgSelectors) {
      const $img = $item.find(imgSelector).first();
      if ($img.length > 0) {
        posterPath = $img.attr('src') || $img.attr('data-src') || $img.attr('data-original') || '';
        
        if (posterPath && 
            !posterPath.includes('/icon/') && 
            !posterPath.includes('/tag/') && 
            !posterPath.includes('dynamic.png') &&
            !posterPath.includes('static.png') &&
            posterPath.length > 10) {
          break;
        }
        posterPath = '';
      }
    }
    
    if (posterPath && !posterPath.startsWith('http')) {
      posterPath = baseUrl + posterPath;
    }
    
    // 提取标题
    let title = '';
    const titleSources = [
      () => $item.find('img').first().attr('alt'),
      () => $item.find('.title, .name').first().text().trim(),
      () => $item.find('h3, h4, h5').first().text().trim(),
      () => $item.find('a').first().attr('title'),
      () => {
        const urlMatch = detailUrl.match(/pd(\d+)\.html/);
        return urlMatch ? `壁纸 ${urlMatch[1]}` : `壁纸 ${index + 1}`;
      }
    ];
    
    for (const getTitle of titleSources) {
      const titleCandidate = getTitle();
      if (titleCandidate && titleCandidate.trim() && titleCandidate.length > 2) {
        title = titleCandidate.trim();
        break;
      }
    }
    
    // 判断媒体类型
    const isDynamic = detailUrl.includes('/dn/') || 
                     $item.text().toLowerCase().includes('动态');
    
    // 提取分类
    let genreTitle = '';
    if (detailUrl.includes('/dn/c1d/')) genreTitle = '4K';
    else if (detailUrl.includes('/dn/c2d/')) genreTitle = '动漫';
    else if (detailUrl.includes('/dn/c3d/')) genreTitle = '风景';
    else if (detailUrl.includes('/dn/c4d/')) genreTitle = '美女';
    else if (detailUrl.includes('/dn/c5d/')) genreTitle = 'AI';
    else if (detailUrl.includes('/dn/c6d/')) genreTitle = '动物';
    else if (detailUrl.includes('/dn/c7d/')) genreTitle = '游戏';
    else if (detailUrl.includes('/dn/c8d/')) genreTitle = '小清新';
    else if (detailUrl.includes('/dn/c11d/')) genreTitle = '其他';
    else genreTitle = isDynamic ? '动态壁纸' : '静态壁纸';
    
    // 返回符合原脚本格式的对象
    return {
      id: detailUrl,
      type: "url",
      title: title || `壁纸 ${index + 1}`,
      posterPath: posterPath,
      backdropPath: posterPath, 
      releaseDate: "",
      mediaType: isDynamic ? "tv" : "movie",
      genreTitle: genreTitle,
      description: `${genreTitle} - ${isDynamic ? "动态壁纸" : "静态壁纸"}`,
      link: detailUrl
    };
    
  } catch (error) {
    console.error(`parseWallpaperItem: 解析项目 ${index} 时出错:`, error.message);
    return null;
  }
}

/**
 * 解析HTML页面中的壁纸信息 - 对应原脚本结构
 */
function parseWallpaperFromHtml(html, baseUrl = BASE_URL) {
  const wallpapers = [];
  
  try {
    const $ = Widget.html.load(html);
    console.log("parseWallpaperFromHtml: 开始解析HTML内容");
    
    // 查找壁纸项目容器
    const itemSelectors = [
      'li',
      '.item', 
      '.wallpaper-item',
      '.pic-item',
      'div[onclick]',
      'a[href*="/dn/pd"]',
      'a[href*="/jt/pj"]'
    ];
    
    let $items = $();
    let usedSelector = '';
    
    for (const selector of itemSelectors) {
      $items = $(selector);
      if ($items.length > 0) {
        usedSelector = selector;
        console.log(`parseWallpaperFromHtml: 使用选择器 ${selector} 找到 ${$items.length} 个项目`);
        break;
      }
    }
    
    if ($items.length === 0) {
      console.warn("parseWallpaperFromHtml: 未找到任何壁纸项目");
      return wallpapers;
    }
    
    $items.each((index, element) => {
      if (index >= 50) return false;
      
      const wallpaperItem = parseWallpaperItem(element, $, baseUrl, index);
      if (wallpaperItem) {
        wallpapers.push(wallpaperItem);
        console.log(`parseWallpaperFromHtml: 成功解析项目 ${index + 1}: ${wallpaperItem.title}`);
      }
    });
    
    console.log(`parseWallpaperFromHtml: 总共成功解析 ${wallpapers.length} 个壁纸项目`);
    
  } catch (error) {
    console.error("parseWallpaperFromHtml: 解析HTML时出错:", error.message);
  }
  
  return wallpapers;
}

/**
 * 获取壁纸列表 - 对应原脚本的getVodList函数
 */
async function getWallpaperList(params = {}) {
  const sortBy = params.sortBy || "all";
  const page = parseInt(params.pg) || 1;
  
  if (page < 1) {
    throw new Error("页码必须大于0");
  }
  
  const requestUrl = buildWallpaperUrl(sortBy, page);
  console.log(`getWallpaperList: 请求壁纸页面: ${requestUrl}`);
  console.log(`getWallpaperList: 分类=${sortBy}, 页码=${page}`);
  
  try {
    const response = await Widget.http.get(requestUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
        'Referer': BASE_URL
      }
    });
    
    if (!response || !response.data) {
      console.error("getWallpaperList: API请求失败，未收到任何数据。URL:", requestUrl);
      throw new Error("API请求失败: 未收到任何数据。");
    }
    
    console.log(`getWallpaperList: 页面内容长度: ${response.data.length} 字符`);
    
    const resultList = parseWallpaperFromHtml(response.data, BASE_URL);
    
    if (resultList && Array.isArray(resultList)) {
      console.log(`getWallpaperList: 成功解析 ${resultList.length} 个壁纸项目。`);
      return resultList;
    } else {
      console.warn("getWallpaperList: 解析返回的壁纸列表为空或格式不正确。");
      return [];
    }
    
  } catch (error) {
    console.error(`getWallpaperList: 获取壁纸列表时发生错误 (${requestUrl}):`, error.message);
    throw new Error(`获取壁纸列表失败: ${error.message}.`);
  }
}

/**
 * 搜索壁纸 - 对应原脚本的searchVod函数
 */
async function searchWallpaper(params = {}) {
  const keyword = params.wd || "";
  const page = parseInt(params.pg) || 1;
  
  if (!keyword.trim()) {
    throw new Error("搜索关键词不能为空");
  }
  
  console.log(`searchWallpaper: 搜索关键词: ${keyword}, 页码: ${page}`);
  
  // 尝试多种搜索URL
  const searchUrls = [
    `${BASE_URL}/search?q=${encodeURIComponent(keyword)}`,
    `${BASE_URL}/search.php?keyword=${encodeURIComponent(keyword)}`,
    `${BASE_URL}/s?wd=${encodeURIComponent(keyword)}`
  ];
  
  try {
    for (const searchUrl of searchUrls) {
      try {
        console.log(`searchWallpaper: 尝试搜索URL: ${searchUrl}`);
        
        const response = await Widget.http.get(searchUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
            'Referer': BASE_URL
          }
        });
        
        if (response && response.data && response.data.length > 1000) {
          const searchResults = parseWallpaperFromHtml(response.data, BASE_URL);
          if (searchResults.length > 0) {
            console.log(`searchWallpaper: 搜索成功，找到 ${searchResults.length} 个结果`);
            return searchResults;
          }
        }
      } catch (error) {
        console.warn(`searchWallpaper: 搜索URL失败 ${searchUrl}:`, error.message);
        continue;
      }
    }
    
    // 备用搜索方案
    console.log("searchWallpaper: 直接搜索失败，使用备用搜索方案");
    return await fallbackSearch(keyword, page);
    
  } catch (error) {
    console.error(`searchWallpaper: 搜索壁纸时发生错误:`, error.message);
    throw new Error(`搜索壁纸失败: ${error.message}.`);
  }
}

/**
 * 备用搜索方案
 */
async function fallbackSearch(keyword, page = 1) {
  console.log(`fallbackSearch: 使用备用搜索方案查找: ${keyword}`);
  
  const categories = ["dynamic", "anime", "landscape", "4k", "beauty", "game"];
  let allResults = [];
  
  try {
    const searchTasks = categories.map(async (sortBy) => {
      try {
        const results = await getWallpaperList({ sortBy, pg: 1 });
        return results.filter(item => 
          item.title.toLowerCase().includes(keyword.toLowerCase()) ||
          item.description.toLowerCase().includes(keyword.toLowerCase()) ||
          item.genreTitle.toLowerCase().includes(keyword.toLowerCase())
        );
      } catch (error) {
        console.warn(`fallbackSearch: 分类 ${sortBy} 搜索失败:`, error.message);
        return [];
      }
    });
    
    const results = await Promise.all(searchTasks);
    results.forEach(categoryResults => {
      allResults = allResults.concat(categoryResults);
    });
    
    // 去重
    const uniqueResults = [];
    const seenIds = new Set();
    allResults.forEach(item => {
      if (!seenIds.has(item.id)) {
        seenIds.add(item.id);
        uniqueResults.push(item);
      }
    });
    
    console.log(`fallbackSearch: 备用搜索找到 ${uniqueResults.length} 个相关结果`);
    return uniqueResults.slice(0, 20);
    
  } catch (error) {
    console.error("fallbackSearch: 备用搜索失败:", error.message);
    return [];
  }
}

/**
 * 加载详情 - 对应原脚本的loadDetail函数
 */
async function loadDetail(detailPageUrl) {
  if (!detailPageUrl || typeof detailPageUrl !== "string") {
    console.error("loadDetail: 无效的 detailPageUrl 参数:", detailPageUrl);
    throw new Error("无效的参数：detailPageUrl 不能为空。");
  }
  
  console.log(`loadDetail: 请求壁纸详情: ${detailPageUrl}`);
  
  try {
    const response = await Widget.http.get(detailPageUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Referer': BASE_URL
      }
    });
    
    if (!response || !response.data) {
      const errorMsg = "未收到任何数据";
      console.error("loadDetail: 详情请求失败:", errorMsg);
      throw new Error(`详情请求失败: ${errorMsg}`);
    }
    
    const wallpaperDetail = parseWallpaperDetail(response.data, detailPageUrl);
    
    console.log("loadDetail returning object:", wallpaperDetail);
    return wallpaperDetail;
    
  } catch (error) {
    console.error(`loadDetail: 加载壁纸详情时发生错误 (URL: ${detailPageUrl}):`, error.message);
    throw new Error(`加载壁纸详情失败: ${error.message}.`);
  }
}

/**
 * 解析壁纸详情页面 - 类似原脚本的详情解析逻辑
 */
function parseWallpaperDetail(html, detailPageUrl) {
  try {
    const $ = Widget.html.load(html);
    console.log("parseWallpaperDetail: 开始解析详情页面");
    
    // 基础返回对象
    let returnObject = {
      id: detailPageUrl,
      type: "url",
      title: "壁纸详情",
      description: "",
      posterPath: "",
      backdropPath: "",
      releaseDate: "",
      genreTitle: "",
      videoUrl: null,
      link: detailPageUrl,
      mediaType: "movie"
    };
    
    // 提取标题
    let title = '';
    const titleSources = [
      () => $('title').text(),
      () => $('h1').first().text(),
      () => $('.title, .name, .wallpaper-title').first().text()
    ];
    
    for (const getTitle of titleSources) {
      const titleCandidate = getTitle();
      if (titleCandidate && titleCandidate.trim()) {
        title = titleCandidate.replace(/\s*-\s*元气壁纸.*$/i, '').trim();
        if (title.length > 2) break;
      }
    }
    
    if (title) {
      returnObject.title = title;
    }
    
    // 提取描述
    const description = $('meta[name="description"]').attr('content') || 
                       $('.description, .desc, .content').first().text().trim();
    if (description) {
      returnObject.description = description;
    }
    
    // 查找视频链接（动态壁纸）
    const videoSelectors = [
      'video source[src]',
      'video[src]',
      'source[src*=".mp4"]',
      'a[href*=".mp4"]',
      '.download-btn[href*=".mp4"]'
    ];
    
    for (const selector of videoSelectors) {
      const $video = $(selector).first();
      if ($video.length > 0) {
        let videoUrl = $video.attr('src') || $video.attr('href') || '';
        if (videoUrl) {
          if (!videoUrl.startsWith('http')) {
            videoUrl = BASE_URL + videoUrl;
          }
          returnObject.videoUrl = videoUrl;
          returnObject.mediaType = "tv"; // 动态壁纸
          console.log("parseWallpaperDetail: 找到视频链接:", videoUrl);
          break;
        }
      }
    }
    
    // 查找图片链接
    const imageSelectors = [
      'img[src*="hd"]',
      'img[src*="large"]',
      '.wallpaper-image img[src]',
      '.detail-image img[src]',
      'img[src]:not([src*="icon"]):not([src*="tag"])',
      'img[src]'
    ];
    
    for (const selector of imageSelectors) {
      const $img = $(selector).first();
      if ($img.length > 0) {
        let imageUrl = $img.attr('src') || '';
        
        if (imageUrl && 
            !imageUrl.includes('/icon/') && 
            !imageUrl.includes('/tag/') && 
            imageUrl.length > 10) {
          
          if (!imageUrl.startsWith('http')) {
            imageUrl = BASE_URL + imageUrl;
          }
          
          returnObject.posterPath = imageUrl;
          returnObject.backdropPath = imageUrl;
          console.log("parseWallpaperDetail: 找到图片链接:", imageUrl);
          break;
        }
      }
    }
    
    // 设置分类
    if (detailPageUrl.includes('/dn/c1d/')) returnObject.genreTitle = '4K动态壁纸';
    else if (detailPageUrl.includes('/dn/c2d/')) returnObject.genreTitle = '动漫动态壁纸';
    else if (detailPageUrl.includes('/dn/c3d/')) returnObject.genreTitle = '风景动态壁纸';
    else if (detailPageUrl.includes('/dn/c4d/')) returnObject.genreTitle = '美女动态壁纸';
    else if (detailPageUrl.includes('/dn/c5d/')) returnObject.genreTitle = 'AI动态壁纸';
    else if (detailPageUrl.includes('/dn/c6d/')) returnObject.genreTitle = '动物动态壁纸';
    else if (detailPageUrl.includes('/dn/c7d/')) returnObject.genreTitle = '游戏动态壁纸';
    else if (detailPageUrl.includes('/dn/c8d/')) returnObject.genreTitle = '小清新动态壁纸';
    else if (detailPageUrl.includes('/dn/c11d/')) returnObject.genreTitle = '其他动态壁纸';
    else if (detailPageUrl.includes('/jt/')) returnObject.genreTitle = '静态壁纸';
    else returnObject.genreTitle = returnObject.videoUrl ? '动态壁纸' : '静态壁纸';
    
    return returnObject;
    
  } catch (error) {
    console.error("parseWallpaperDetail: 解析详情时出错:", error.message);
    
    // 返回基础对象，避免完全失败
    return {
      id: detailPageUrl,
      type: "url",
      title: "壁纸详情",
      description: "解析失败",
      posterPath: "",
      backdropPath: "",
      releaseDate: "",
      genreTitle: "壁纸",
      videoUrl: null,
      link: detailPageUrl,
      mediaType: "movie"
    };
  }
}
