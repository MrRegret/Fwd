/* ---------- Widget Metadata ---------- */
var WidgetMetadata = {
  id: "xtream_rest_api",
  title: "Xtream REST API Client",
  description: "Official Xtream Codes REST API client for content viewing with enhanced features",
  author: "Enhanced by Assistant",
  site: "https://github.com/InchStudio/ForwardWidgets",
  version: "4.0.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,
  modules: [
    {
      title: "Quick Connect",
      description: "Auto-parse URL and connect to server",
      requiresWebView: false,
      functionName: "quickConnect",
      cacheDuration: 300,
      params: [
        { 
          name: "xtream_url", 
          title: "Xtream URL", 
          type: "input", 
          placeholder: "http://host/player_api.php?username=xxx&password=xxx" 
        },
        { 
          name: "bg_color", 
          title: "Logo Background Color", 
          type: "input", 
          placeholder: "1C1C1E" 
        }
      ]
    },
    {
      title: "Server Status",
      description: "View server information and status",
      requiresWebView: false,
      functionName: "getServerStatus",
      cacheDuration: 60,
      params: [
        { name: "host", title: "Server Host", type: "input", placeholder: "lot77162.cdngold.me" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" }
      ]
    },
    {
      title: "Live Categories",
      description: "Browse live TV categories",
      requiresWebView: false,
      functionName: "getLiveCategories",
      cacheDuration: 600,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    },
    {
      title: "Live Streams",
      description: "Browse live TV streams",
      requiresWebView: false,
      functionName: "getLiveStreams",
      cacheDuration: 300,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "category_id", title: "Category ID", type: "input", placeholder: "Leave empty for all" },
        { name: "keyword", title: "Search Keyword", type: "input", placeholder: "Search channels..." },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    },
    {
      title: "VOD Categories", 
      description: "Browse movie/VOD categories",
      requiresWebView: false,
      functionName: "getVodCategories",
      cacheDuration: 600,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    },
    {
      title: "VOD Streams",
      description: "Browse movies and VOD content",
      requiresWebView: false,
      functionName: "getVodStreams", 
      cacheDuration: 300,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "category_id", title: "Category ID", type: "input", placeholder: "Leave empty for all" },
        { name: "keyword", title: "Search Keyword", type: "input", placeholder: "Search movies..." },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    },
    {
      title: "Series Categories",
      description: "Browse TV series categories", 
      requiresWebView: false,
      functionName: "getSeriesCategories",
      cacheDuration: 600,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    },
    {
      title: "Series & Episodes",
      description: "Browse TV series with episodes",
      requiresWebView: false,
      functionName: "getSeriesStreams",
      cacheDuration: 300,
      params: [
        { name: "host", title: "Server Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "category_id", title: "Category ID", type: "input", placeholder: "Leave empty for all" },
        { name: "keyword", title: "Search Keyword", type: "input", placeholder: "Search series..." },
        { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
      ]
    }
  ],
  search: {
    title: "Universal Search",
    functionName: "universalSearch", 
    params: [
      { name: "host", title: "Server Host", type: "input" },
      { name: "username", title: "Username", type: "input" },
      { name: "password", title: "Password", type: "input" },
      { name: "keyword", title: "Search Query", type: "input", placeholder: "Search all content..." },
      { name: "bg_color", title: "Logo BG Color", type: "input", placeholder: "1C1C1E" }
    ]
  }
};

/* ---------- Utility Functions ---------- */
function parseXtreamUrl(url) {
  try {
    if (!url || typeof url !== 'string') {
      throw new Error("Invalid URL");
    }
    
    if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {
      throw new Error("URL must start with http:// or https://");
    }
    
    var withoutProtocol = url.replace(/^https?:\/\//, '');
    var slashIndex = withoutProtocol.indexOf('/');
    var host = slashIndex > -1 ? withoutProtocol.substring(0, slashIndex) : withoutProtocol;
    
    if (!host) {
      throw new Error("Invalid host");
    }
    
    var queryStart = url.indexOf('?');
    if (queryStart === -1) {
      throw new Error("No query parameters found");
    }
    
    var queryString = url.substring(queryStart + 1);
    var params = {};
    
    var pairs = queryString.split('&');
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var equalIndex = pair.indexOf('=');
      if (equalIndex > -1) {
        var key = pair.substring(0, equalIndex);
        var value = pair.substring(equalIndex + 1);
        params[decodeURIComponent(key)] = decodeURIComponent(value);
      }
    }
    
    var username = params.username;
    var password = params.password;
    
    if (!username || !password) {
      throw new Error("Username and password are required in URL");
    }
    
    return { host: host, username: username, password: password };
  } catch (error) {
    throw new Error("Failed to parse URL: " + error.message);
  }
}

function buildPlayerApiUrl(host, username, password, action, extraParams) {
  var baseUrl = "http://" + host + "/player_api.php";
  var params = [];
  
  params.push("username=" + encodeURIComponent(username));
  params.push("password=" + encodeURIComponent(password));
  
  if (action) {
    params.push("action=" + encodeURIComponent(action));
  }
  
  if (extraParams) {
    for (var key in extraParams) {
      if (extraParams.hasOwnProperty(key)) {
        var value = extraParams[key];
        if (value !== undefined && value !== null && value !== '') {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
      }
    }
  }
  
  return baseUrl + "?" + params.join('&');
}

function buildRestApiUrl(host, action, sub, extraParams) {
  var baseUrl = "http://" + host + "/api.php";
  var params = [];
  
  if (action) {
    params.push("action=" + encodeURIComponent(action));
  }
  
  if (sub) {
    params.push("sub=" + encodeURIComponent(sub));
  }
  
  if (extraParams) {
    for (var key in extraParams) {
      if (extraParams.hasOwnProperty(key)) {
        var value = extraParams[key];
        if (value !== undefined && value !== null && value !== '') {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
      }
    }
  }
  
  return baseUrl + "?" + params.join('&');
}

function createFallbackImage(title, bgColor) {
  var color = bgColor || "1C1C1E";
  return "https://fakeimg.pl/200x120/" + color + "/?text=" + encodeURIComponent(title);
}

function getDefaultHeaders() {
  return { "User-Agent": "XtreamRestAPI/4.0.0" };
}

/* ---------- Quick Connect Function ---------- */
async function quickConnect(params) {
  params = params || {};
  var xtream_url = params.xtream_url;
  var bg_color = params.bg_color;
  
  if (!xtream_url) {
    throw new Error("Xtream URL is required");
  }

  try {
    var parsed = parseXtreamUrl(xtream_url);
    var host = parsed.host;
    var username = parsed.username;
    var password = parsed.password;
    
    // ÊµãËØïËøûÊé• - ‰ΩøÁî®player APIÈ™åËØÅÂá≠ÊçÆ
    var authUrl = buildPlayerApiUrl(host, username, password, "");
    var response = await Widget.http.get(authUrl, { headers: getDefaultHeaders() });
    
    if (!response || !response.data) {
      throw new Error("Failed to connect to server");
    }

    // Ëé∑ÂèñÊúçÂä°Âô®‰ø°ÊÅØ
    var serverInfo = response.data;
    
    return [
      {
        id: "connection_success",
        type: "url",
        title: "‚úÖ Connected Successfully",
        description: "Server: " + host + "\nUser: " + username + "\nStatus: " + (serverInfo.user_info ? "Active" : "Connected"),
        backdropPath: createFallbackImage("Connected", bg_color)
      },
      {
        id: "server_status",
        type: "url", 
        title: "üñ•Ô∏è Server Status",
        description: "View detailed server information and statistics",
        backdropPath: createFallbackImage("Server Info", bg_color)
      },
      {
        id: "live_content",
        type: "url",
        title: "üì∫ Live TV",
        description: "Browse live television channels and categories",
        backdropPath: createFallbackImage("Live TV", bg_color)
      },
      {
        id: "vod_content",
        type: "url",
        title: "üé¨ Movies & VOD",
        description: "Browse movies and video on demand content",
        backdropPath: createFallbackImage("Movies", bg_color)
      },
      {
        id: "series_content",
        type: "url",
        title: "üì∫ TV Series",
        description: "Browse TV series and episodes",
        backdropPath: createFallbackImage("TV Series", bg_color)
      }
    ];
  } catch (error) {
    throw new Error("Connection failed: " + error.message);
  }
}

/* ---------- Server Status Function ---------- */
async function getServerStatus(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  try {
    // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
    var userUrl = buildPlayerApiUrl(host, username, password, "");
    var userResponse = await Widget.http.get(userUrl, { headers: getDefaultHeaders() });
    
    // Â∞ùËØïËé∑ÂèñÊúçÂä°Âô®ÂàóË°® (Â¶ÇÊûúÊúâÊùÉÈôê)
    var serverListUrl = buildRestApiUrl(host, "server", "list");
    var serverResponse;
    try {
      serverResponse = await Widget.http.get(serverListUrl, { headers: getDefaultHeaders() });
    } catch (e) {
      console.log("Server list not accessible:", e.message);
    }
    
    var results = [];
    
    if (userResponse && userResponse.data) {
      var userInfo = userResponse.data.user_info || {};
      var serverInfo = userResponse.data.server_info || {};
      
      results.push({
        id: "user_info",
        type: "url",
        title: "üë§ User Information",
        description: "Username: " + userInfo.username + 
                    "\nStatus: " + (userInfo.status || "Active") +
                    "\nExpiry: " + (userInfo.exp_date || "No limit") +
                    "\nConnections: " + (userInfo.active_cons || 0) + "/" + (userInfo.max_connections || "‚àû"),
        backdropPath: createFallbackImage("User Info", "2E8B57")
      });
      
      if (serverInfo.url) {
        results.push({
          id: "server_info", 
          type: "url",
          title: "üåê Server Information",
          description: "Server: " + (serverInfo.url || host) +
                      "\nPort: " + (serverInfo.port || "80") +
                      "\nHTTPS: " + (serverInfo.https_port ? "Available" : "Not available") +
                      "\nTimezone: " + (serverInfo.timezone || "UTC"),
          backdropPath: createFallbackImage("Server Info", "4169E1")
        });
      }
    }
    
    if (serverResponse && serverResponse.data && Array.isArray(serverResponse.data)) {
      results.push({
        id: "server_list",
        type: "url", 
        title: "üñ•Ô∏è Server Status",
        description: "Total servers: " + serverResponse.data.length + 
                    "\nOnline: " + serverResponse.data.filter(function(s) { return s.status === 'online'; }).length,
        backdropPath: createFallbackImage("Servers", "FF6347")
      });
    }
    
    if (results.length === 0) {
      results.push({
        id: "basic_status",
        type: "url",
        title: "‚úÖ Connection Active", 
        description: "Successfully connected to " + host,
        backdropPath: createFallbackImage("Active", "32CD32")
      });
    }
    
    return results;
  } catch (error) {
    throw new Error("Failed to get server status: " + error.message);
  }
}

/* ---------- Category Functions ---------- */
async function getLiveCategories(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var apiUrl = buildPlayerApiUrl(host, username, password, "get_live_categories");
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid categories response");
  }

  return response.data.map(function(category) {
    return {
      id: "live_cat_" + category.category_id,
      type: "url",
      title: category.category_name,
      description: "Category ID: " + category.category_id,
      backdropPath: createFallbackImage(category.category_name, bg_color)
    };
  });
}

async function getVodCategories(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var apiUrl = buildPlayerApiUrl(host, username, password, "get_vod_categories");
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid categories response");
  }

  return response.data.map(function(category) {
    return {
      id: "vod_cat_" + category.category_id,
      type: "url", 
      title: category.category_name,
      description: "Category ID: " + category.category_id,
      backdropPath: createFallbackImage(category.category_name, bg_color)
    };
  });
}

async function getSeriesCategories(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var apiUrl = buildPlayerApiUrl(host, username, password, "get_series_categories");
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid categories response");
  }

  return response.data.map(function(category) {
    return {
      id: "series_cat_" + category.category_id,
      type: "url",
      title: category.category_name, 
      description: "Category ID: " + category.category_id,
      backdropPath: createFallbackImage(category.category_name, bg_color)
    };
  });
}

/* ---------- Stream Functions ---------- */
async function getLiveStreams(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var category_id = params.category_id;
  var keyword = params.keyword || "";
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var extraParams = {};
  if (category_id) {
    extraParams.category_id = category_id;
  }
  
  var apiUrl = buildPlayerApiUrl(host, username, password, "get_live_streams", extraParams);
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid streams response");
  }

  // ÂÖ≥ÈîÆËØçËøáÊª§
  var kw = keyword.trim().toLowerCase();
  var streams = response.data.filter(function(stream) {
    return !kw || (stream.name || "").toLowerCase().indexOf(kw) !== -1;
  });

  return streams.map(function(stream) {
    return {
      id: "live_" + stream.stream_id,
      type: "url",
      title: stream.name,
      description: stream.category_name || "Live Channel",
      backdropPath: stream.stream_icon || createFallbackImage(stream.name, bg_color),
      posterPath: stream.stream_icon,
      videoUrl: "http://" + host + "/live/" + username + "/" + password + "/" + stream.stream_id + ".ts",
      customHeaders: getDefaultHeaders(),
      mediaType: "tv"
    };
  });
}

async function getVodStreams(params) {
  params = params || {};
  var host = params.host;
  var username = params.username; 
  var password = params.password;
  var category_id = params.category_id;
  var keyword = params.keyword || "";
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var extraParams = {};
  if (category_id) {
    extraParams.category_id = category_id;
  }
  
  var apiUrl = buildPlayerApiUrl(host, username, password, "get_vod_streams", extraParams);
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid streams response");
  }

  // ÂÖ≥ÈîÆËØçËøáÊª§
  var kw = keyword.trim().toLowerCase();
  var streams = response.data.filter(function(stream) {
    return !kw || (stream.name || "").toLowerCase().indexOf(kw) !== -1;
  });

  return streams.map(function(stream) {
    return {
      id: "vod_" + stream.stream_id,
      type: "url",
      title: stream.name,
      description: stream.category_name || "Video on Demand", 
      backdropPath: stream.stream_icon || createFallbackImage(stream.name, bg_color),
      posterPath: stream.stream_icon,
      videoUrl: "http://" + host + "/movie/" + username + "/" + password + "/" + stream.stream_id + "." + (stream.container_extension || 'mp4'),
      customHeaders: getDefaultHeaders(),
      mediaType: "movie",
      rating: stream.rating,
      releaseDate: stream.added
    };
  });
}

async function getSeriesStreams(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var category_id = params.category_id;
  var keyword = params.keyword || "";
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }

  var extraParams = {};
  if (category_id) {
    extraParams.category_id = category_id;
  }
  
  var apiUrl = buildPlayerApiUrl(host, username, password, "get_series", extraParams);
  var response = await Widget.http.get(apiUrl, { headers: getDefaultHeaders() });

  if (!response || !response.data || !Array.isArray(response.data)) {
    throw new Error("Invalid series response");
  }

  // ÂÖ≥ÈîÆËØçËøáÊª§
  var kw = keyword.trim().toLowerCase();
  var series = response.data.filter(function(s) {
    return !kw || (s.name || "").toLowerCase().indexOf(kw) !== -1;
  });

  var results = [];
  
  // ‰∏∫ÊØè‰∏™Á≥ªÂàóËé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØÂíåÂâßÈõÜ
  for (var i = 0; i < Math.min(series.length, 20); i++) { // ÈôêÂà∂Êï∞ÈáèÈÅøÂÖçËØ∑Ê±ÇËøáÂ§ö
    var s = series[i];
    try {
      var seriesInfoUrl = buildPlayerApiUrl(host, username, password, "get_series_info", { series_id: s.series_id });
      var seriesInfoResponse = await Widget.http.get(seriesInfoUrl, { headers: getDefaultHeaders() });
      
      if (seriesInfoResponse && seriesInfoResponse.data && seriesInfoResponse.data.episodes) {
        var info = seriesInfoResponse.data.info || {};
        var episodes = seriesInfoResponse.data.episodes || {};
        
        // Ê∑ªÂä†Á≥ªÂàó‰∏ªÊù°ÁõÆ
        results.push({
          id: "series_" + s.series_id,
          type: "url",
          title: s.name,
          description: info.description || info.plot || s.category_name || "TV Series",
          backdropPath: s.cover || info.cover || createFallbackImage(s.name, bg_color),
          posterPath: s.cover || info.cover,
          mediaType: "tv",
          rating: s.rating || info.rating,
          releaseDate: s.releaseDate || info.releaseDate
        });
        
        // Ê∑ªÂä†ÂâßÈõÜ
        var episodeList = [];
        for (var seasonNum in episodes) {
          if (episodes.hasOwnProperty(seasonNum)) {
            var seasonEpisodes = episodes[seasonNum];
            for (var episodeNum in seasonEpisodes) {
              if (seasonEpisodes.hasOwnProperty(episodeNum)) {
                var episode = seasonEpisodes[episodeNum];
                episodeList.push({
                  seasonNum: seasonNum,
                  episodeNum: episodeNum,
                  episode: episode
                });
              }
            }
          }
        }
        
        // Ê∑ªÂä†ÂâçÂá†ÈõÜ‰Ωú‰∏∫Áã¨Á´ãÊù°ÁõÆ
        for (var j = 0; j < Math.min(episodeList.length, 5); j++) {
          var ep = episodeList[j];
          var relatedEpisodes = episodeList.slice(j + 1, j + 4).map(function(relEp) {
            return {
              id: "episode_" + s.series_id + "_s" + relEp.seasonNum + "_e" + relEp.episodeNum,
              type: "url",
              title: "S" + relEp.seasonNum + "E" + relEp.episodeNum + ": " + (relEp.episode.title || "Episode " + relEp.episodeNum),
              description: relEp.episode.info || "Season " + relEp.seasonNum + ", Episode " + relEp.episodeNum,
              backdropPath: (relEp.episode.info && relEp.episode.info.movie_image) || s.cover || createFallbackImage("S" + relEp.seasonNum + "E" + relEp.episodeNum, bg_color),
              videoUrl: "http://" + host + "/series/" + username + "/" + password + "/" + relEp.episode.id + "." + (relEp.episode.container_extension || 'mp4'),
              customHeaders: getDefaultHeaders(),
              mediaType: "tv"
            };
          });
          
          results.push({
            id: "episode_" + s.series_id + "_s" + ep.seasonNum + "_e" + ep.episodeNum,
            type: "url",
            title: "S" + ep.seasonNum + "E" + ep.episodeNum + ": " + (ep.episode.title || "Episode " + ep.episodeNum),
            description: ep.episode.info || "Season " + ep.seasonNum + ", Episode " + ep.episodeNum,
            backdropPath: (ep.episode.info && ep.episode.info.movie_image) || s.cover || createFallbackImage("S" + ep.seasonNum + "E" + ep.episodeNum, bg_color),
            posterPath: (ep.episode.info && ep.episode.info.movie_image) || s.cover,
            videoUrl: "http://" + host + "/series/" + username + "/" + password + "/" + ep.episode.id + "." + (ep.episode.container_extension || 'mp4'),
            customHeaders: getDefaultHeaders(),
            mediaType: "tv",
            episode: parseInt(ep.episodeNum),
            childItems: relatedEpisodes
          });
        }
      } else {
        // Â¶ÇÊûúÊó†Ê≥ïËé∑ÂèñÂâßÈõÜ‰ø°ÊÅØÔºåËá≥Â∞ëÊ∑ªÂä†Á≥ªÂàóÊù°ÁõÆ
        results.push({
          id: "series_" + s.series_id,
          type: "url",
          title: s.name,
          description: s.category_name || "TV Series",
          backdropPath: s.cover || createFallbackImage(s.name, bg_color),
          posterPath: s.cover,
          mediaType: "tv",
          rating: s.rating,
          releaseDate: s.releaseDate
        });
      }
    } catch (error) {
      console.log("Error getting series info for " + s.series_id + ":", error.message);
      // Ê∑ªÂä†Âü∫Êú¨Á≥ªÂàó‰ø°ÊÅØ
      results.push({
        id: "series_" + s.series_id,
        type: "url",
        title: s.name,
        description: s.category_name || "TV Series",
        backdropPath: s.cover || createFallbackImage(s.name, bg_color),
        posterPath: s.cover,
        mediaType: "tv"
      });
    }
  }

  return results;
}

/* ---------- Universal Search Function ---------- */
async function universalSearch(params) {
  params = params || {};
  var host = params.host;
  var username = params.username;
  var password = params.password;
  var keyword = params.keyword;
  var bg_color = params.bg_color;
  
  if (!host || !username || !password) {
    throw new Error("Host, username, and password are required");
  }
  
  if (!keyword || keyword.trim().length < 2) {
    throw new Error("Search keyword must be at least 2 characters long");
  }

  var results = [];
  
  try {
    // ÊêúÁ¥¢Áõ¥Êí≠
    var liveStreams = await getLiveStreams({ host: host, username: username, password: password, keyword: keyword, bg_color: bg_color });
    results = results.concat(liveStreams.slice(0, 8));
    
    // ÊêúÁ¥¢VOD
    var vodStreams = await getVodStreams({ host: host, username: username, password: password, keyword: keyword, bg_color: bg_color });
    results = results.concat(vodStreams.slice(0, 8));
    
    // ÊêúÁ¥¢Á≥ªÂàó
    var seriesStreams = await getSeriesStreams({ host: host, username: username, password: password, keyword: keyword, bg_color: bg_color });
    results = results.concat(seriesStreams.slice(0, 8));
    
  } catch (error) {
    console.log("Search error:", error.message);
    // ËøîÂõûÈÉ®ÂàÜÁªìÊûúÂç≥‰ΩøÊüê‰∫õÊêúÁ¥¢Â§±Ë¥•
  }
  
  if (results.length === 0) {
    return [{
      id: "no_results",
      type: "url",
      title: "No Results Found",
      description: "No content found for \"" + keyword + "\"",
      backdropPath: createFallbackImage("No Results", bg_color)
    }];
  }
  
  return results;
}
