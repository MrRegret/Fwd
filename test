/* ---------- Widget Metadata ---------- */
var WidgetMetadata = {
  id: "xtream_full",
  title: "Xtream FULL (Live+VOD)",
  description: "支持 http/https，自动解析 m3u 链接，分类浏览，关键词搜索，VOD 多集聚合",
  author: "VEUS",
  site: "VEUS",
  version: "2.10.1",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,
  modules: [
    {
      title: "Live 频道",
      description: "按分类浏览直播频道",
      requiresWebView: false,
      functionName: "getLiveCategories",
      cacheDuration: 300,
      params: [
        { name: "host", title: "m3u 完整链接 或 Host", type: "input", placeholder: "http://lot77162.cdngold.me" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "keyword", title: "关键词过滤", type: "input", placeholder: "CCTV" },
        { name: "page", title: "页码", type: "page" }
      ]
    },
    {
      title: "VOD 点播",
      description: "按分类浏览点播内容",
      requiresWebView: false,
      functionName: "getVodCategories",
      cacheDuration: 300,
      params: [
        { name: "host", title: "m3u 完整链接 或 Host", type: "input" },
        { name: "username", title: "Username", type: "input" },
        { name: "password", title: "Password", type: "input" },
        { name: "keyword", title: "关键词过滤", type: "input", placeholder: "movie" },
        { name: "page", title: "页码", type: "page" }
      ]
    }
  ],
  search: {
    title: "全网搜索",
    functionName: "searchAll",
    params: [
      { name: "host", title: "m3u 完整链接 或 Host", type: "input" },
      { name: "username", title: "Username", type: "input" },
      { name: "password", title: "Password", type: "input" },
      { name: "keyword", title: "关键词", type: "input" }
    ]
  }
};

/* ---------- 工具函数 ---------- */
function parseCredentials(rawHost) {
  // 支持直接粘贴完整 m3u 链接或普通 host
  let protocol = "http";
  let host = rawHost.trim();
  let username = "";
  let password = "";

  try {
    const url = new URL(rawHost);
    protocol = url.protocol.slice(0, -1); // "http" or "https"
    host = url.hostname + (url.port ? ":" + url.port : "");
    username = url.searchParams.get("username") || "";
    password = url.searchParams.get("password") || "";
  } catch (_) {
    // 不是合法 URL，按普通 host 处理
  }
  return { protocol, host, username, password };
}

async function apiGet(base, endpoint, params) {
  const qs = new URLSearchParams(params).toString();
  const url = `${base}/player_api.php?${qs}`;
  const headers = { "User-Agent": "AptvPlayer/1.4.11" };
  const res = await Widget.http.get(url, { headers });
  if (!res?.data) throw new Error("API 无响应");
  return res.data;
}

/* ---------- Live 分类 ---------- */
async function getLiveCategories(params = {}) {
  const { host: rawHost, keyword, page = 1 } = params;
  if (!rawHost) throw new Error("缺少 host");

  const { protocol, host, username, password } = parseCredentials(rawHost || "");
  if (!host || !username || !password) throw new Error("host / username / password 缺失");

  const base = `${protocol}://${host}`;
  const cats = await apiGet(base, { username, password, action: "get_live_categories" });
  if (!Array.isArray(cats)) throw new Error("分类接口异常");

  const kw = keyword ? keyword.trim().toLowerCase() : "";
  const filtered = kw
    ? cats.filter(c => (c.category_name || "").toLowerCase().includes(kw))
    : cats;

  // 分页：每页 20 个分类
  const limit = 20;
  const offset = (page - 1) * limit;
  const slice = filtered.slice(offset, offset + limit);

  return slice.map(c => ({
    id: `live_cat_${c.category_id}`,
    type: "link",
    title: c.category_name,
    link: `forward://xtream_full/getLiveByCat?host=${rawHost}&cat=${c.category_id}&page=1`
  }));
}

/* ---------- 按 Live 分类加载频道 ---------- */
async function getLiveByCat(params = {}) {
  const { host: rawHost, cat, keyword, page = 1 } = params;
  const { protocol, host, username, password } = parseCredentials(rawHost || "");
  const base = `${protocol}://${host}`;

  const streams = await apiGet(base, { username, password, action: "get_live_streams", category_id: cat });
  if (!Array.isArray(streams)) throw new Error("频道接口异常");

  const kw = keyword ? keyword.trim().toLowerCase() : "";
  let filtered = kw ? streams.filter(s => (s.name || "").toLowerCase().includes(kw)) : streams;

  const limit = 50;
  const offset = (page - 1) * limit;
  filtered = filtered.slice(offset, offset + limit);

  return filtered.map(s => ({
    id: `${base}/live/${username}/${password}/${s.stream_id}.ts`,
    type: "url",
    title: s.name,
    backdropPath: s.stream_icon || `https://fakeimg.pl/200x120/1C1C1E/ffffff/?text=${encodeURIComponent(s.name)}`,
    description: s.category_name || "",
    videoUrl: `${base}/live/${username}/${password}/${s.stream_id}.ts`,
    customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
  }));
}

/* ---------- VOD 分类 ---------- */
async function getVodCategories(params = {}) {
  const { host: rawHost, keyword, page = 1 } = params;
  if (!rawHost) throw new Error("缺少 host");

  const { protocol, host, username, password } = parseCredentials(rawHost || "");
  const base = `${protocol}://${host}`;
  const cats = await apiGet(base, { username, password, action: "get_vod_categories" });
  if (!Array.isArray(cats)) throw new Error("VOD 分类接口异常");

  const kw = keyword ? keyword.trim().toLowerCase() : "";
  const filtered = kw
    ? cats.filter(c => (c.category_name || "").toLowerCase().includes(kw))
    : cats;

  const limit = 20;
  const offset = (page - 1) * limit;
  const slice = filtered.slice(offset, offset + limit);

  return slice.map(c => ({
    id: `vod_cat_${c.category_id}`,
    type: "link",
    title: c.category_name,
    link: `forward://xtream_full/getVodByCat?host=${rawHost}&cat=${c.category_id}&page=1`
  }));
}

/* ---------- 按 VOD 分类加载影片 ---------- */
async function getVodByCat(params = {}) {
  const { host: rawHost, cat, keyword, page = 1 } = params;
  const { protocol, host, username, password } = parseCredentials(rawHost || "");
  const base = `${protocol}://${host}`;

  const videos = await apiGet(base, { username, password, action: "get_vod_streams", category_id: cat });
  if (!Array.isArray(videos)) throw new Error("VOD 接口异常");

  const kw = keyword ? keyword.trim().toLowerCase() : "";
  let filtered = kw ? videos.filter(v => (v.name || "").toLowerCase().includes(kw)) : videos;

  const limit = 50;
  const offset = (page - 1) * limit;
  filtered = filtered.slice(offset, offset + limit);

  // 对于系列影片，拉取 episode list 并作为 childItems
  const result = [];
  for (const v of filtered) {
    const item = {
      id: `${base}/movie/${username}/${password}/${v.stream_id}.mp4`,
      type: "url",
      title: v.name,
      backdropPath: v.stream_icon || `https://fakeimg.pl/200x120/1C1C1E/ffffff/?text=${encodeURIComponent(v.name)}`,
      description: v.category_name || "",
      videoUrl: `${base}/movie/${username}/${password}/${v.stream_id}.mp4`,
      customHeaders: { "User-Agent": "AptvPlayer/1.4.11" },
      childItems: []
    };

    // 只有 series 才拉 episode
    if (v.series && v.series.length > 1) {
      const eps = v.series.map(ep => ({
        id: `${base}/series/${username}/${password}/${ep.id}.mp4`,
        type: "url",
        title: ep.title || `EP ${ep.episode_num}`,
        videoUrl: `${base}/series/${username}/${password}/${ep.id}.mp4`,
        customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
      }));
      item.childItems = eps;
    }
    result.push(item);
  }
  return result;
}

/* ---------- 全网搜索（Live + VOD 合并） ---------- */
async function searchAll(params = {}) {
  const { host: rawHost, keyword } = params;
  if (!keyword || !rawHost) throw new Error("host 与 keyword 均不能为空");

  const { protocol, host, username, password } = parseCredentials(rawHost || "");
  const base = `${protocol}://${host}`;
  const kw = keyword.trim().toLowerCase();

  const [live, vod] = await Promise.all([
    apiGet(base, { username, password, action: "get_live_streams" }),
    apiGet(base, { username, password, action: "get_vod_streams" })
  ]);

  const liveItems = (live || [])
    .filter(s => (s.name || "").toLowerCase().includes(kw))
    .map(s => ({
      id: `${base}/live/${username}/${password}/${s.stream_id}.ts`,
      type: "url",
      title: `[LIVE] ${s.name}`,
      backdropPath: s.stream_icon || `https://fakeimg.pl/200x120/1C1C1E/ffffff/?text=${encodeURIComponent(s.name)}`,
      videoUrl: `${base}/live/${username}/${password}/${s.stream_id}.ts`,
      customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
    }));

  const vodItems = (vod || [])
    .filter(v => (v.name || "").toLowerCase().includes(kw))
    .map(v => ({
      id: `${base}/movie/${username}/${password}/${v.stream_id}.mp4`,
      type: "url",
      title: `[VOD] ${v.name}`,
      backdropPath: v.stream_icon || `https://fakeimg.pl/200x120/1C1C1E/ffffff/?text=${encodeURIComponent(v.name)}`,
      videoUrl: `${base}/movie/${username}/${password}/${v.stream_id}.mp4`,
      customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
    }));

  return [...liveItems, ...vodItems];
}
