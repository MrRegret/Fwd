/* ---------- Widget Metadata ---------- */
var WidgetMetadata = {
  id: "xtream_api_v3",
  title: "Xtream Live v3",
  description: "支持 HTTPS、URL 传参、分类分页、关键词搜索、相关剧集推荐",
  author: "VEUS",
  site: "https://github.com/InchStudio/ForwardWidgets",
  version: "3.0.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,

  modules: [
    /* 0) 分类列表 */
    {
      title: "📂 频道分类",
      description: "先选分类，再加载频道",
      functionName: "getCategories",
      cacheDuration: 3600,
      params: [
        { name: "url", type: "input", placeholder: "https://lot77162.cdngold.me" },
        { name: "username", type: "input" },
        { name: "password", type: "input" }
      ]
    },
    /* 1) 按分类 + 分页 + 关键词 取频道 */
    {
      title: "📺 频道列表",
      description: "分类 + 关键词 + 分页",
      functionName: "getChannels",
      sectionMode: true,            // 允许“点击查看更多”
      cacheDuration: 300,
      params: [
        { name: "url", type: "input" },
        { name: "username", type: "input" },
        { name: "password", type: "input" },
        { name: "categoryId", type: "constant", value: "0" }, // 0 = 全部
        { name: "keyword", type: "input", placeholder: "CCTV / HBO ..." },
        { name: "page", type: "page", value: 1 },
        { name: "size", type: "constant", value: 50 }          // 每页条数
      ]
    }
  ],

  /* 全局搜索（跨分类） */
  search: {
    title: "🔍 全局搜索",
    functionName: "getChannels",
    params: [
      { name: "url", type: "input" },
      { name: "username", type: "input" },
      { name: "password", type: "input" },
      { name: "keyword", type: "input" }
    ]
  }
};

/* ==================== 工具函数 ==================== */
// 1) 从完整 URL 里抽出 protocol://host
function parseHost(raw) {
  if (!raw) return "";
  const m = raw.match(/^(https?:\/\/[^/]+)/i);
  return m ? m[1] : `http://${raw}`;
}

// 2) 从 URL 参数自动填充
function fillFromQuery(params) {
  if (params.url) return; // 已手动填过
  try {
    const u = new URL(location.href); // 仅浏览器环境
    params.url   = u.searchParams.get("url")   || "";
    params.username = u.searchParams.get("username") || "";
    params.password = u.searchParams.get("password") || "";
  } catch (_) {}
}

/* ---------- 0) 分类列表 ---------- */
async function getCategories(params = {}) {
  fillFromQuery(params);
  const { url: rawUrl, username, password } = params;
  if (!rawUrl || !username || !password) {
    throw new Error("⚠️ 请填写完整服务器地址 / 用户名 / 密码");
  }
  const host = parseHost(rawUrl);
  const api = `${host}/player_api.php?username=${username}&password=${password}&action=get_live_categories`;
  const res = await Widget.http.get(api, { headers: { "User-Agent": "AptvPlayer/1.4.11" } });
  if (!Array.isArray(res.data)) throw new Error("❌ 分类接口返回异常");

  return res.data.map(c => ({
    id: c.category_id,
    type: "link",
    title: c.category_name || "未分类",
    link: "forward://getChannels?" +
          `url=${encodeURIComponent(rawUrl)}&username=${encodeURIComponent(username)}` +
          `&password=${encodeURIComponent(password)}&categoryId=${c.category_id}`
  }));
}

/* ---------- 1) 频道列表（分页、关键词、分类过滤） ---------- */
async function getChannels(params = {}) {
  fillFromQuery(params);
  const { url: rawUrl, username, password, categoryId, keyword, page = 1, size = 50 } = params;
  if (!rawUrl || !username || !password) {
    throw new Error("⚠️ 请填写完整服务器地址 / 用户名 / 密码");
  }
  const host = parseHost(rawUrl);
  const api = `${host}/player_api.php?username=${username}&password=${password}&action=get_live_streams`;
  const res = await Widget.http.get(api, { headers: { "User-Agent": "AptvPlayer/1.4.11" } });
  if (!Array.isArray(res.data)) throw new Error("❌ 频道接口返回异常");

  /* 过滤：分类 + 关键词 */
  let list = res.data;
  if (categoryId && categoryId !== "0") {
    list = list.filter(ch => String(ch.category_id) === String(categoryId));
  }
  if (keyword) {
    const kw = keyword.toLowerCase();
    list = list.filter(ch => (ch.name || "").toLowerCase().includes(kw));
  }

  /* 分页 */
  const total = list.length;
  const offset = (page - 1) * size;
  list = list.slice(offset, offset + size);

  /* 构造结果 */
  const items = list.map(ch => ({
    id: `${host}/live/${username}/${password}/${ch.stream_id}.ts`,
    type: "url",
    title: ch.name,
    backdropPath: ch.stream_icon || `https://fakeimg.pl/400x225/1C1C1E/ffffff?text=${encodeURIComponent(ch.name)}`,
    genreTitle: ch.category_name || "",
    description: ch.category_name || "",
    videoUrl: `${host}/live/${username}/${password}/${ch.stream_id}.ts`,
    customHeaders: { "User-Agent": "AptvPlayer/1.4.11" },

    /* 5) 如果同一 JSON 里还有 VOD 多集，以 childItems 推荐 */
    childItems: ch.series ? ch.series.map(ep => ({
      id: `${host}/series/${username}/${password}/${ep.id}.mp4`,
      type: "url",
      title: `📺 ${ep.title || ep.name}`,
      videoUrl: `${host}/series/${username}/${password}/${ep.id}.mp4`,
      customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
    })) : undefined
  }));

  /* 如果还有更多，生成分页按钮 */
  if (offset + size < total) {
    items.push({
      id: `nextPage_${page + 1}`,
      type: "link",
      title: `➡️ 加载第 ${page + 1} 页`,
      link: "forward://getChannels?" +
            `url=${encodeURIComponent(rawUrl)}&username=${encodeURIComponent(username)}` +
            `&password=${encodeURIComponent(password)}&categoryId=${categoryId || 0}` +
            `&keyword=${encodeURIComponent(keyword || "")}&page=${page + 1}`
    });
  }
  return items;
}
