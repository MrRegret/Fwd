/* ---------- WidgetMetadata ---------- */
var WidgetMetadata = {
  id: "xtream_api_enhance",
  title: "Xtream API Live",
  description: "Fetch live channels via official Xtream-Codes REST API with keyword search",
  author: "🎁 Discount Code：VEUS",
  site: "🎁 Discount Code：VEUS",
  version: "2.9.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,
  modules: [
    {
      title: "Channel List",
      description: "REST API → channel cards",
      requiresWebView: false,
      functionName: "getChannels",
      cacheDuration: 300,
      params: [
        { name: "m3u_url", type: "input", placeholder: "http://host/get.php?username=xxx&password=xxx&type=m3u_plus" },
        { name: "host", type: "input", placeholder: "lot77162.cdngold.me" },
        { name: "username", type: "input" },
        { name: "password", type: "input" },
        { name: "keyword", type: "input", placeholder: "CCTV, Sports..." },
        { name: "protocol", type: "enumeration", enumOptions: [
            { title: "HTTP", value: "http" },
            { title: "HTTPS", value: "https" }
          ], default: "http" },
        { name: "ua", type: "input", placeholder: "Forward/1.3.2" },
        { name: "bg_color", type: "input", placeholder: "1C1C1E" }
      ]
    }
  ]
};

/* ---------- 主函数 ---------- */
async function getChannels(params = {}) {
  let { host, username, password, keyword, bg_color, ua, protocol } = params;

  /* 解析 M3U 链接 */
  if (!host && params.m3u_url) {
    const p = parseM3uUrl(params.m3u_url);
    if (p) ({ host, username, password, protocol } = p);
  }
  if (!host || !username || !password) throw new Error("请填写 host / username / password，或直接粘贴 M3U 链接");

  const UA = ua || "Forward/1.3.2";               // ← 全部统一
  const base = `${protocol}://${host}/player_api.php?username=${username}&password=${password}`;
  const kw = keyword ? keyword.trim().toLowerCase() : "";

  const [liveCats, vodCats, serCats] = await Promise.all([
    api(`${base}&action=get_live_categories`, UA),
    api(`${base}&action=get_vod_categories`, UA),
    api(`${base}&action=get_series_categories`, UA)
  ]);

  const cards = [];
  liveCats.slice(0, 30).forEach(c => cards.push(catCard("📺 Live", c, "live", base, UA)));
  vodCats.slice(0, 30).forEach(c => cards.push(catCard("🎬 VOD", c, "vod", base, UA)));
  serCats.slice(0, 30).forEach(c => cards.push(catCard("📺 Series", c, "series", base, UA)));
  return cards;
}

/* ---------- 二级函数 ---------- */
async function getStreamsByCat({ type, catId, host, username, password, keyword, ua, protocol }) {
  const base = `${protocol}://${host}/player_api.php?username=${username}&password=${password}`;
  const UA = ua || "Forward/1.3.2";
  const kw = keyword ? keyword.trim().toLowerCase() : "";

  let data = [];
  if (type === "live") {
    data = filter(await api(`${base}&action=get_live_streams&category_id=${catId}`, UA), kw);
  } else if (type === "vod") {
    data = filter(await api(`${base}&action=get_vod_streams&category_id=${catId}`, UA), kw);
  } else if (type === "series") {
    data = filter(await api(`${base}&action=get_series&category_id=${catId}`, UA), kw);
  }
  return data.map(it => itemCard(it.name, it,
    `${base.replace("player_api.php", type)}/${it.stream_id}.${type === "live" ? "ts" : (it.container_extension || "mp4")}`,
    type
  ));
}

/* ---------- 工具函数 ---------- */
function parseM3uUrl(raw) {
  try {
    const u = new URL(raw);
    return {
      protocol: u.protocol.slice(0, -1),
      host: u.hostname,
      username: u.searchParams.get("username"),
      password: u.searchParams.get("password")
    };
  } catch { return null; }
}

async function api(url, ua) {
  try {
    const res = await Widget.http.get(url, { headers: { "User-Agent": ua } });
    return Array.isArray(res.data) ? res.data : [];
  } catch (e) {
    console.error("Request failed:", e);
    throw new Error("网络请求失败");
  }
}

function filter(arr, kw) {
  return kw ? arr.filter(i => (i.name || "").toLowerCase().includes(kw)) : arr;
}

function catCard(icon, cat, type, base, UA) {
  const host = base.match(/https?:\/\/([^\/]+)/)[1];
  const username = base.match(/username=([^&]+)/)[1];
  const password = base.match(/password=([^&]+)/)[1];
  const protocol = base.split("://")[0];
  return {
    id: `${type}_cat_${cat.category_id}`,
    type: "url",
    title: `${icon} ${cat.category_name}`,
    url: `js:getStreamsByCat({type:"${type}",catId:${cat.category_id},host:"${host}",username:"${username}",password:"${password}",protocol:"${protocol}",ua:"${UA}"})`,
    backdropPath: `https://fakeimg.pl/200x120/1C1C1E/?text=${encodeURIComponent(cat.category_name)}`
  };
}

function itemCard(title, obj, url, media) {
  return {
    id: url,
    type: "url",
    title,
    description: obj.category_name || "",
    posterPath: obj.stream_icon || "",
    backdropPath: obj.stream_icon || "",
    mediaType: media === "live" ? "tv" : "movie",
    videoUrl: url
  };
}
