var WidgetMetadata = {
  id: "xtream_live_safe",
  title: "Xtream Live (Manual)",
  description: "Input host/user/pass manually, HTTPS supported, category + keyword + VOD series",
  author: "Forward Team",
  site: "https://forward.example.com",
  version: "3.1.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 60,
  modules: [
    {
      title: "Live Categories",
      description: "Select category → pageable channel list",
      requiresWebView: false,
      sectionMode: true,
      functionName: "getChannels",
      cacheDuration: 600,
      params: [
        { name: "host",     title: "Server Host",   type: "input", placeholder: "lot77162.cdngold.me" },
        { name: "username", title: "Username",      type: "input" },
        { name: "password", title: "Password",      type: "input" },
        { name: "https",    title: "HTTPS",         type: "enumeration", enumOptions: [{title:"HTTP",value:"http"},{title:"HTTPS",value:"https"}], value: "http" },
        { name: "keyword",  title: "Keyword",       type: "input", placeholder: "CCTV, HBO…" },
        { name: "page",     title: "Page",          type: "page", value: 1 }
      ]
    }
  ],
  search: {
    title: "Search",
    functionName: "search",
    params: [
        { name: "host",     title: "Host",      type: "input" },
        { name: "username", title: "Username",  type: "input" },
        { name: "password", title: "Password",  type: "input" },
        { name: "https",    title: "HTTPS",     type: "enumeration", enumOptions: [{title:"HTTP",value:"http"},{title:"HTTPS",value:"https"}], value: "http" },
        { name: "keyword",  title: "Keyword",   type: "input", required: true }
    ]
  }
};

/* ===========================================================================
   工具：简单校验
   ========================================================================== */
function sanitize(str) {
  return str.toString().trim();
}

/* ===========================================================================
   主函数：分类分页
   ========================================================================== */
async function getChannels(params = {}) {
  const { host, username, password, https = "http", keyword = "", page = 1 } = params;
  if (!host || !username || !password) throw new Error("Host / Username / Password required");

  const base = `${https}://${sanitize(host)}`;
  const api  = `${base}/player_api.php`;
  const qs   = `username=${encodeURIComponent(sanitize(username))}&password=${encodeURIComponent(sanitize(password))}`;
  const UA   = "Forward/1.3.2";

  /* 1. 分类列表 */
  const catRes = await Widget.http.get(`${api}?${qs}&action=get_live_categories`, { headers: { "User-Agent": UA } });
  if (!Array.isArray(catRes.data)) throw new Error("Failed to fetch categories");
  const cats = catRes.data.filter(c => c.category_name);

  /* 2. 分页定位 */
  const PAGE_SIZE = 30;
  const catIdx    = Math.floor((page - 1) / PAGE_SIZE);
  const category  = cats[catIdx];
  if (!category) return [];

  const catId   = category.category_id;
  const offset  = ((page - 1) % PAGE_SIZE) * PAGE_SIZE;

  /* 3. 当前分类的频道 */
  const chRes = await Widget.http.get(`${api}?${qs}&action=get_live_streams&category_id=${catId}`, { headers: { "User-Agent": UA } });
  if (!Array.isArray(chRes.data)) throw new Error("No channels");
  let channels = chRes.data;
  const kw = keyword.toLowerCase();
  if (kw) channels = channels.filter(c => (c.name || "").toLowerCase().includes(kw));

  const slice = channels.slice(offset, offset + PAGE_SIZE);
  return slice.map(c => ({
    id: `${base}/live/${sanitize(username)}/${sanitize(password)}/${c.stream_id}.ts`,
    type: "url",
    title: sanitize(c.name),
    description: sanitize(c.category_name),
    posterPath: sanitize(c.stream_icon),
    backdropPath: sanitize(c.stream_icon),
    videoUrl: `${base}/live/${sanitize(username)}/${sanitize(password)}/${c.stream_id}.ts`,
    customHeaders: { "User-Agent": UA }
  }));
}

/* ===========================================================================
   搜索：含 VOD 系列
   ========================================================================== */
async function search(params = {}) {
  const { host, username, password, https = "http", keyword } = params;
  if (!host || !username || !password || !keyword) throw new Error("Missing required params");

  const base = `${https}://${sanitize(host)}`;
  const api  = `${base}/player_api.php`;
  const qs   = `username=${encodeURIComponent(sanitize(username))}&password=${encodeURIComponent(sanitize(password))}`;
  const UA   = "Forward/1.3.2";

  const res = await Widget.http.get(`${api}?${qs}&action=get_live_streams`, { headers: { "User-Agent": UA } });
  if (!Array.isArray(res.data)) return [];

  const kw = keyword.toLowerCase();
  const hits = res.data.filter(c => (c.name || "").toLowerCase().includes(kw));

  /* 支持 VOD 系列 */
  const enriched = await Promise.all(
    hits.slice(0, 30).map(async c => {
      let childItems = [];
      if (c.series_id) {
        try {
          const serRes = await Widget.http.get(`${api}?${qs}&action=get_series_info&series_id=${c.series_id}`, { headers: { "User-Agent": UA } });
          if (serRes.data?.episodes) {
            childItems = serRes.data.episodes.map(e => ({
              id: `${base}/series/${sanitize(username)}/${sanitize(password)}/${e.id}.mp4`,
              type: "url",
              title: sanitize(e.title),
              episode: parseInt(e.episode_num) || 0,
              videoUrl: `${base}/series/${sanitize(username)}/${sanitize(password)}/${e.id}.mp4`,
              customHeaders: { "User-Agent": UA }
            }));
          }
        } catch { /* ignore */ }
      }
      return {
        id: `${base}/live/${sanitize(username)}/${sanitize(password)}/${c.stream_id}.ts`,
        type: "url",
        title: sanitize(c.name),
        description: sanitize(c.category_name),
        posterPath: sanitize(c.stream_icon),
        backdropPath: sanitize(c.stream_icon),
        videoUrl: `${base}/live/${sanitize(username)}/${sanitize(password)}/${c.stream_id}.ts`,
        childItems,
        customHeaders: { "User-Agent": UA }
      };
    })
  );
  return enriched;
}
