/*****************************************************************
 *  Xtream Live v3.3 – 手动填参版
 *****************************************************************/

WidgetMetadata = {
    id: "xtream_live_v33",
    title: "Xtream Live v3.3",
    description: "HTTPS 自适应、分类分页、关键词搜索、剧集推荐（手动填参）",
    author: "VEUS",
    site: "https://github.com/InchStudio/ForwardWidgets",
    version: "3.3.0",
    requiredVersion: "0.0.1",
    detailCacheDuration: 60,

    modules: [
      {
        title: "📂 频道分类",
        description: "先选分类，再加载频道",
        requiresWebView: false,
        functionName: "getCategories",
        cacheDuration: 3600,
        params: [
          { name: "host",     title: "服务器地址", type: "input", placeholder: "https://lot77162.cdngold.me" },
          { name: "username", title: "用户名",     type: "input" },
          { name: "password", title: "密码",       type: "input" }
        ]
      },
      {
        title: "📺 频道列表",
        description: "分类 + 关键词 + 分页",
        requiresWebView: false,
        functionName: "getChannels",
        sectionMode: true,
        cacheDuration: 300,
        params: [
          { name: "host",       title: "服务器地址", type: "input" },
          { name: "username",   title: "用户名",     type: "input" },
          { name: "password",   title: "密码",       type: "input" },
          { name: "categoryId", title: "分类 ID",    type: "enumeration", enumOptions: [] },
          { name: "keyword",    title: "关键词",     type: "input", placeholder: "CCTV / HBO ..." },
          { name: "page",       title: "页码",       type: "page", value: 1 },
          { name: "size",       title: "每页条数",   type: "constant", value: 50 }
        ]
      }
    ],

    search: {
      title: "🔍 全局搜索",
      functionName: "getChannels",
      params: [
        { name: "host",     type: "input" },
        { name: "username", type: "input" },
        { name: "password", type: "input" },
        { name: "keyword",  type: "input" }
      ]
    }
  };

  /* ---------- 工具函数 ---------- */
  function parseHost(raw) {
    if (!raw) throw new Error("请填写服务器地址");
    return /^https?:\/\//.test(raw) ? raw : "http://" + raw;
  }

  /* ---------- 分类列表 ---------- */
  async function getCategories(params = {}) {
    const { host: rawHost, username, password } = params;
    if (!rawHost || !username || !password) throw new Error("缺少服务器地址 / 用户名 / 密码");

    const host = parseHost(rawHost);
    const api  = `${host}/player_api.php?username=${username}&password=${password}&action=get_live_categories`;
    const res  = await Widget.http.get(api, { headers: { "User-Agent": "AptvPlayer/1.4.11" } });
    if (!Array.isArray(res.data)) throw new Error("分类接口返回异常");

    return res.data.map(c => ({
      id: String(c.category_id),
      type: "link",
      title: c.category_name || "未分类",
      link: `${host}/player_api.php?username=${username}&password=${password}&action=get_live_streams&category_id=${c.category_id}`
    }));
  }

  /* ---------- 频道列表 ---------- */
  async function getChannels(params = {}) {
    const { host: rawHost, username, password, categoryId, keyword, page = 1, size = 50 } = params;
    if (!rawHost || !username || !password) throw new Error("缺少服务器地址 / 用户名 / 密码");

    const host = parseHost(rawHost);
    let api    = `${host}/player_api.php?username=${username}&password=${password}&action=get_live_streams`;
    if (categoryId && categoryId !== "0") api += `&category_id=${categoryId}`;

    const res = await Widget.http.get(api, { headers: { "User-Agent": "AptvPlayer/1.4.11" } });
    if (!Array.isArray(res.data)) throw new Error("频道接口返回异常");

    let list = res.data;
    if (keyword) {
      const kw = keyword.toLowerCase();
      list = list.filter(ch => (ch.name || "").toLowerCase().includes(kw));
    }

    const total  = list.length;
    const offset = (page - 1) * size;
    list = list.slice(offset, offset + size);

    if (!list.length && page === 1) {
      return [{ id: "empty", type: "url", title: "⚠️ 无匹配频道", description: "" }];
    }

    return list.map(ch => ({
      id: `${host}/live/${username}/${password}/${ch.stream_id}.ts`,
      type: "url",
      title: ch.name,
      posterPath: ch.stream_icon || `https://fakeimg.pl/200x300/1C1C1E/ffffff?text=${encodeURIComponent(ch.name)}`,
      backdropPath: ch.stream_icon,
      mediaType: "tv",
      genreTitle: ch.category_name || "",
      description: ch.category_name || "",
      videoUrl: `${host}/live/${username}/${password}/${ch.stream_id}.ts`,
      customHeaders: { "User-Agent": "AptvPlayer/1.4.11" },

      childItems: ch.series && Array.isArray(ch.series)
        ? ch.series.map(ep => ({
            id: `${host}/series/${username}/${password}/${ep.id}.mp4`,
            type: "url",
            title: ep.title || ep.name,
            videoUrl: `${host}/series/${username}/${password}/${ep.id}.mp4`,
            customHeaders: { "User-Agent": "AptvPlayer/1.4.11" }
          }))
        : undefined
    }));
  }

  /* ---------- 导出 ---------- */
  globalThis.WidgetMetadata = WidgetMetadata;
  globalThis.getCategories  = getCategories;
  globalThis.getChannels    = getChannels;
})();
