/* ---------- Widget Metadata ---------- */
var WidgetMetadata = {
  id: "xtream_port80",
  title: "Xtream 80端口专用",
  description: "固定端口80，UA Forward/1.3.2，直接粘贴完整API链接即可",
  author: "2kuai",
  version: "5.2.0",
  requiredVersion: "0.0.1",
  modules: [{
    title: "解析 & 浏览",
    functionName: "main",
    params: [
      { name: "xtream_url", title: "完整API链接", type: "input",
        placeholder: "http://lot77162.cdngold.me/player_api.php?username=Ahmedalrufaidy&password=h7cy07dp31&action=get_live_streams" },
      { name: "keyword", title: "关键词过滤", type: "input", placeholder: "留空显示全部" }
    ]
  }]
};

/* ---------- 主函数 ---------- */
async function main(params = {}) {
  const { xtream_url, keyword = "" } = params;
  if (!xtream_url) throw new Error("请粘贴完整API链接");

  /* 1. 解析 URL（端口强制 80）*/
  const { host, username, password } = parseUrl(xtream_url);
  const baseUrl = `http://${host}:80`;
  const kw = keyword.trim().toLowerCase();

  /* 2. 调试日志 */
  console.log("请求URL:", `${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_live_streams`);

  /* 3. 拉取分类 */
  const liveCats   = await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_live_categories`);
  const vodCats    = await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_vod_categories`);
  const seriesCats = await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_series_categories`);

  /* 4. 拉取内容并过滤 */
  const liveChans  = filter(await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_live_streams`), kw);
  const vodMovies  = filter(await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_vod_streams`), kw);
  const seriesList = filter(await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_series`), kw);

  /* 5. 检查空数组 */
  if (!liveChans.length && !vodMovies.length && !seriesList.length) {
    throw new Error("服务器返回空数组，请检查账号、端口或面板地址");
  }

  /* 6. 组装卡片 */
  const cards = [];

  /* 6-1 分类入口 */
  liveCats.forEach(c => cards.push(entry("📺 Live", c.category_name, c.category_id, baseUrl, "live")));
  vodCats.forEach(c  => cards.push(entry("🎬 VOD",  c.category_name, c.category_id, baseUrl, "vod")));
  seriesCats.forEach(c=> cards.push(entry("📺 Series", c.category_name, c.category_id, baseUrl, "series")));

  /* 6-2 直播频道（前 30） */
  liveChans.slice(0, 30).forEach(ch => cards.push(card(ch.name, ch, `${baseUrl}/live/${username}/${password}/${ch.stream_id}.ts`, "live")));

  /* 6-3 电影（前 20） */
  vodMovies.slice(0, 20).forEach(m => cards.push(card(m.name, m, `${baseUrl}/movie/${username}/${password}/${m.stream_id}.${(m.container_extension || 'mp4')}`, "movie")));

  /* 6-4 剧集（首集 + 相关 4 集） */
  for (const s of seriesList.slice(0, 10)) {
    const infoRes = await api(`${baseUrl}/player_api.php?username=${username}&password=${password}&action=get_series_info&series_id=${s.series_id}`);
    const eps = Object.values(infoRes.episodes || {}).flat().slice(0, 5);
    if (!eps.length) continue;

    const mainEp = eps[0];
    const related = eps.slice(1, 5).map(e => card(`S${e.season}E${e.episode_num}`, e, `${baseUrl}/series/${username}/${password}/${e.id}.${e.container_extension || 'mp4'}`, "tv"));
    cards.push({
      id: `series_${s.series_id}_main`,
      type: "url",
      title: `${s.name} - S${mainEp.season}E${mainEp.episode_num}`,
      description: infoRes.info?.plot || s.category_name,
      backdropPath: s.cover || infoRes.info?.cover || "",
      videoUrl: `${baseUrl}/series/${username}/${password}/${mainEp.id}.${mainEp.container_extension || 'mp4'}`,
      childItems: related
    });
  }

  return cards;
}

/* ---------- 工具函数 ---------- */
function parseUrl(url) {
  const [proto, rest] = url.split('://');
  const [hostPort, query] = rest.split('?');
  const [host] = hostPort.split(':');           // 端口固定 80
  const pairs = query.split('&').reduce((o, p) => {
    const [k, v] = p.split('=');
    o[decodeURIComponent(k)] = decodeURIComponent(v || '');
    return o;
  }, {});
  return { protocol: proto, host, port: 80, username: pairs.username, password: pairs.password };
}

async function api(u) {
  const r = await Widget.http.get(u, { headers: { "User-Agent": "Forward/1.3.2" } });
  return Array.isArray(r.data) ? r.data : [];
}

function filter(arr, kw) {
  return kw ? arr.filter(i => (i.name || '').toLowerCase().includes(kw)) : arr;
}

function entry(icon, name, id, base, type) {
  return { id: `${type}_${id}`, type: "url", title: `${icon} ${name}`, description: `点击查看 ${type} 列表`, backdropPath: `https://fakeimg.pl/200x120/1C1C1E/?text=${encodeURIComponent(name)}` };
}

function card(title, obj, url, media) {
  return { id: url, type: "url", title, description: obj.category_name || "", backdropPath: obj.stream_icon || "", videoUrl: url, mediaType: media };
}
