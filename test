/* ---------- WidgetMetadata（必须放在开头） ---------- */
var WidgetMetadata = {
  id: "xtream_official_v2",
  title: "Xtream Official V2",
  description: "使用官方 REST API 拉取 Live/VOD，支持分类+分页+关键词",
  author: "kimi",
  site: "https://github.com/InchStudio/ForwardWidgets",
  version: "11.0.0",
  requiredVersion: "0.0.1",
  detailCacheDuration: 300,
  modules: [
    {
      title: "Live",
      description: "直播频道",
      requiresWebView: false,
      sectionMode: true,
      cacheDuration: 300,
      functionName: "getLive",
      params: [
        { name: "url",     type: "input",   placeholder: "https://host/get.php?username=xxx&password=xxx&type=m3u_plus" },
        { name: "keyword", type: "input",   placeholder: "关键词过滤" },
        { name: "page",    type: "page",    value: 1 }
      ]
    },
    {
      title: "VOD",
      description: "电影/剧集",
      requiresWebView: false,
      sectionMode: true,
      cacheDuration: 600,
      functionName: "getVod",
      params: [
        { name: "url",     type: "input",   placeholder: "同上" },
        { name: "keyword", type: "input",   placeholder: "关键词过滤" },
        { name: "page",    type: "page",    value: 1 }
      ]
    }
  ]
};

/* ---------- 工具 ---------- */
function parseUrl(fullUrl) {
  try {
    const u = new URL(fullUrl);
    return {
      host: `${u.protocol}//${u.host}`,
      username: u.searchParams.get("username"),
      password: u.searchParams.get("password")
    };
  } catch {
    throw new Error("❌ 无法解析 m3u_plus 链接");
  }
}

/* ---------- Live ---------- */
async function getLive(params = {}) {
  const { url, keyword, page = 1 } = params;
  const { host, username, password } = parseUrl(url);
  const skip = (page - 1) * 50;

  const [cats, streams] = await Promise.all([
    (await Widget.http.get(`${host}/player_api.php?username=${username}&password=${password}&action=get_live_categories`)).data,
    (await Widget.http.get(`${host}/player_api.php?username=${username}&password=${password}&action=get_live_streams&limit=50,${skip}`)).data
  ]);

  const kw = keyword?.trim().toLowerCase();
  const filtered = kw ? streams.filter(s => s.name.toLowerCase().includes(kw)) : streams;

  const catMap = new Map(cats.map(c => [c.category_id, c.category_name]));
  const grouped = filtered.reduce((g, s) => {
    const cat = catMap.get(s.category_id) || "Other";
    (g[cat] ||= []).push({
      id: `${host}/live/${username}/${password}/${s.stream_id}.ts`,
      type: "url",
      title: s.name,
      backdropPath: s.stream_icon || `https://fakeimg.pl/200x120/1C1C1E/?text=${encodeURIComponent(s.name)}`,
      description: cat,
      videoUrl: `${host}/live/${username}/${password}/${s.stream_id}.ts`
    });
    return g;
  }, {});

  return Object.entries(grouped).map(([cat, items]) => ({
    id: cat,
    type: "url",
    title: cat,
    description: `${items.length} 个频道`,
    childItems: items
  }));
}

/* ---------- VOD ---------- */
async function getVod(params = {}) {
  const { url, keyword, page = 1 } = params;
  const { host, username, password } = parseUrl(url);
  const skip = (page - 1) * 50;

  const [cats, vods] = await Promise.all([
    (await Widget.http.get(`${host}/player_api.php?username=${username}&password=${password}&action=get_vod_categories`)).data,
    (await Widget.http.get(`${host}/player_api.php?username=${username}&password=${password}&action=get_vod_streams&limit=50,${skip}`)).data
  ]);

  const kw = keyword?.trim().toLowerCase();
  const filtered = kw ? vods.filter(v => v.name.toLowerCase().includes(kw)) : vods;
  const catMap = new Map(cats.map(c => [c.category_id, c.category_name]));

  return filtered.map(v => ({
    id: `${host}/movie/${username}/${password}/${v.stream_id}.mp4`,
    type: "url",
    title: v.name,
    posterPath: v.stream_icon,
    description: catMap.get(v.category_id) || "VOD",
    videoUrl: `${host}/movie/${username}/${password}/${v.stream_id}.mp4`
  }));
}
